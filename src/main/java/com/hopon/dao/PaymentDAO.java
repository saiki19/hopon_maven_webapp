package com.hopon.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.hopon.dto.PaymentDTO;
import com.hopon.utils.ApplicationUtil;
import com.hopon.utils.QueryExecuter;
import com.mysql.jdbc.Statement;

public class PaymentDAO {
	public PaymentDTO insertPayment(Connection con, PaymentDTO dto) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("SELECT count(*) from payment WHERE circle_id = ? AND user_id = ? AND start_date = ? AND end_date = ?");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		pstmt.setInt(1, dto.getCircleId());
		pstmt.setInt(2, dto.getUserId());
		pstmt.setString(3, ApplicationUtil.dateFormat1.format(dto.getStartDate()));
		pstmt.setString(4, ApplicationUtil.dateFormat1.format(dto.getEndDate()));
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		boolean insertTest = false;
		if(rs.next() && rs.getInt(1) == 0) {
			insertTest = true;
		}
		rs.close();pstmt.close();
		if(insertTest) {
			query = new StringBuilder();
			query.append("INSERT INTO payment(payment_id, circle_id, user_id, amount, start_date, end_date, due_date, created_date, details, `status`) VALUES (?,?,?,?,?,?,?,?,?)");
	
			pstmt = con.prepareStatement(query.toString() ,Statement.RETURN_GENERATED_KEYS);
			pstmt.setInt(1, dto.getPaymentId());
			pstmt.setInt(2, dto.getCircleId());
			pstmt.setInt(3, dto.getUserId());
			pstmt.setDouble(4, dto.getAmount());
			pstmt.setString(5, ApplicationUtil.dateFormat1.format(dto.getStartDate()));
			pstmt.setString(6, ApplicationUtil.dateFormat1.format(dto.getEndDate()));
			pstmt.setString(7, ApplicationUtil.dateFormat1.format(dto.getDueDate()));
			pstmt.setString(8, ApplicationUtil.dateFormat1.format(new Date()));
			pstmt.setString(9, dto.getDetails());
			pstmt.setString(10, dto.getStatus());
			pstmt.executeUpdate();
			ResultSet tableKeys = pstmt.getGeneratedKeys();
			tableKeys.next();
			int autoGeneratedID = tableKeys.getInt(1);
			tableKeys.close();
			pstmt.close();
			dto.setPaymentId(autoGeneratedID);
		}
		return dto;
	} 
	public PaymentDTO updatePaymentStatus(Connection con, PaymentDTO dto) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("UPDATE payment set `status` = ? WHERE payment_id = ?");

		PreparedStatement pstmt = con.prepareStatement(query.toString() ,Statement.RETURN_GENERATED_KEYS);
		pstmt.setString(1, dto.getStatus());
		pstmt.setInt(2, dto.getPaymentId());
		pstmt.executeUpdate();
		return dto;
	}
	public List<PaymentDTO> fetchPaymentList(Connection con, int id) throws SQLException {
		List<PaymentDTO> dtos = new ArrayList<PaymentDTO>();
		StringBuilder query = new StringBuilder();
		query.append("SELECT payment_id, circle_id, amount, start_date, end_date, due_date, created_date,details, `status` from payment WHERE user_id = ? ORDER BY start_date DESC");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		pstmt.setInt(1, id);
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		while(rs.next()){
			PaymentDTO dto = new PaymentDTO();
			dto.setPaymentId(rs.getInt(1));
			dto.setCircleId(rs.getInt(2));
			dto.setUserId(id);
			dto.setAmount(rs.getDouble(3));
			try {
				dto.setStartDate(ApplicationUtil.dateFormat1.parse(rs.getString(4)));
			} catch (ParseException e) { }
			try {
				dto.setEndDate(ApplicationUtil.dateFormat1.parse(rs.getString(5)));
			} catch (ParseException e) { }
			try {
				dto.setDueDate(ApplicationUtil.dateFormat1.parse(rs.getString(6)));
			} catch (ParseException e) { }
			try {
				dto.setCreatedDate(ApplicationUtil.dateFormat1.parse(rs.getString(7)));
			} catch (ParseException e) { }
			dto.setDetails(rs.getString(8));
			dto.setStatus(rs.getString(9));
			dtos.add(dto);
		}
		return dtos;
	}
	public List<PaymentDTO> fetchActivePaymentListForCircle(Connection con, Integer[] circleIds) throws SQLException {
		List<PaymentDTO> dtos = new ArrayList<PaymentDTO>();
		StringBuilder query = new StringBuilder();
		query.append("SELECT payment_id, circle_id, user_id, amount, start_date, end_date, due_date, created_date,details, `status` from payment WHERE circle_id IN( ? ) AND `status` = 'A' ORDER BY start_date DESC");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		String subquery = "";
		for(int index:circleIds) subquery += index + ",";
		if(subquery.length() > 0) subquery = subquery.substring(0, subquery.length() - 1);
		pstmt.setString(1, subquery);
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		while(rs.next()){
			PaymentDTO dto = new PaymentDTO();
			dto.setPaymentId(rs.getInt(1));
			dto.setCircleId(rs.getInt(2));
			dto.setUserId(rs.getInt(3));
			dto.setAmount(rs.getDouble(4));
			try {
				dto.setStartDate(ApplicationUtil.dateFormat1.parse(rs.getString(5)));
			} catch (ParseException e) { }
			try {
				dto.setEndDate(ApplicationUtil.dateFormat1.parse(rs.getString(6)));
			} catch (ParseException e) { }
			try {
				dto.setDueDate(ApplicationUtil.dateFormat1.parse(rs.getString(7)));
			} catch (ParseException e) { }
			try {
				dto.setCreatedDate(ApplicationUtil.dateFormat1.parse(rs.getString(8)));
			} catch (ParseException e) { }
			dto.setDetails(rs.getString(9));
			dto.setStatus(rs.getString(10));
			dtos.add(dto);
		}
		return dtos;
	}
}
