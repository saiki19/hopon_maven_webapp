package com.hopon.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.hopon.dto.HoponAccountDTO;
import com.hopon.dto.PaymentRequestDTO;
import com.hopon.dto.UserRegistrationDTO;
import com.hopon.utils.ApplicationUtil;
import com.hopon.utils.QueryExecuter;
import com.hopon.utils.Validator;
import com.mysql.jdbc.Statement;

public class PaymentRequestDAO {

	public PaymentRequestDTO addPaymentRequestEntry(Connection con,PaymentRequestDTO dto) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("INSERT INTO payment_request(`id`, `user_id`, `order_id`, `amount`, `date_time`, `credit_debit`, `status`, `reason`, `created_date`, `created_by`) values(null, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
		PreparedStatement pstmt = con.prepareStatement(query.toString(),
				Statement.RETURN_GENERATED_KEYS);
		pstmt.setInt(1, dto.getUserId());
		pstmt.setString(2, dto.getOrder_id());
		pstmt.setFloat(3, dto.getAmount());
		pstmt.setString(4, ApplicationUtil.currentTimeStamp());
		pstmt.setString(5, dto.getCreditDebit());
		pstmt.setString(6, dto.getStatus());
		pstmt.setString(7, dto.getReason());
		pstmt.setString(8, ApplicationUtil.currentTimeStamp());
		pstmt.setInt(9, dto.getCreatedBy());
		pstmt.executeUpdate();
		ResultSet tableKeys = pstmt.getGeneratedKeys();
		tableKeys.next();
		int autoGeneratedID = tableKeys.getInt(1);
		tableKeys.close();
		pstmt.close();
		dto.setId(autoGeneratedID);
		return dto;
	}

	public PaymentRequestDTO insertWithDrawEntry(Connection con,
			PaymentRequestDTO dto) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("INSERT INTO payment_request(`id`, `user_id`, `order_id`, `amount`, `credit_debit`, `status`, `created_by`,`date_time`,`created_date`) values(null, ?, ?, ?, ?, ?, ?, ?, ?)");
		PreparedStatement pstmt = con.prepareStatement(query.toString(),
				Statement.RETURN_GENERATED_KEYS);
		pstmt.setInt(1, dto.getUserId());
		pstmt.setString(2, dto.getOrder_id());
		pstmt.setFloat(3, dto.getAmount());
		pstmt.setString(4, dto.getCreditDebit());
		pstmt.setString(5, dto.getStatus());
		pstmt.setInt(6, dto.getCreatedBy());
		pstmt.setString(7, ApplicationUtil.currentTimeStamp());
		pstmt.setString(8, ApplicationUtil.currentTimeStamp());
		pstmt.executeUpdate();
		ResultSet tableKeys = pstmt.getGeneratedKeys();
		tableKeys.next();
		int autoGeneratedID = tableKeys.getInt(1);
		tableKeys.close();
		pstmt.close();
		dto.setId(autoGeneratedID);
		return dto;
	}

	public void updatePaymentRequestEntryStatusById(Connection con,
			PaymentRequestDTO dto) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("UPDATE payment_request SET `status` = ?, `updated_date` = ?, `updated_by` = ? WHERE `id` = ?");
		PreparedStatement pstmt = con.prepareStatement(query.toString(),
				Statement.RETURN_GENERATED_KEYS);
		pstmt.setString(1, dto.getStatus());
		pstmt.setString(2, ApplicationUtil.currentTimeStamp());
		pstmt.setInt(3, dto.getUpdateBy());
		pstmt.setInt(4, dto.getId());
		pstmt.executeUpdate();
		pstmt.close();
	}

	public void updatePaymentRequestEntryStatusByOrderId(Connection con,
			PaymentRequestDTO dto) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("UPDATE payment_request SET `status` = ?, `updated_date` = ?, `updated_by` = ?,`transaction_id`=? WHERE `order_id` = ?");
		PreparedStatement pstmt = con.prepareStatement(query.toString(),
				Statement.RETURN_GENERATED_KEYS);
		pstmt.setString(1, dto.getStatus());
		pstmt.setString(2, ApplicationUtil.currentTimeStamp());
		pstmt.setInt(3, dto.getUpdateBy());
		pstmt.setString(4, dto.getOrder_id());
		pstmt.setString(5, dto.getTransaction_id());
		pstmt.executeUpdate();
		pstmt.close();
	}

	public void updatePaymentRequestEntryStatusByIdArray(Connection con,
			String status, int[] paymentRequestIds, int updatedBy)
			throws SQLException {
		String inCondition = "";
		for (int i : paymentRequestIds) {
			inCondition += i + ",";
		}
		inCondition += "0";
		StringBuilder query = new StringBuilder();
		query.append("UPDATE payment_request SET `status` = ?, `updated_date` = ?, `updated_by` = ? WHERE `id` IN( "
				+ inCondition + " )");
		PreparedStatement pstmt = con.prepareStatement(query.toString(),
				Statement.RETURN_GENERATED_KEYS);
		pstmt.setString(1, status);
		pstmt.setString(2, ApplicationUtil.currentTimeStamp());
		pstmt.setInt(3, updatedBy);
		pstmt.executeUpdate();
		pstmt.close();
	}

	public List<PaymentRequestDTO> fetchPaymentRequestBetweenDates(
			Connection con, Date startDate, Date endDate) throws SQLException {
		List<PaymentRequestDTO> dtos = new ArrayList<PaymentRequestDTO>();
		StringBuilder query = new StringBuilder();
		query.append("SELECT p.`id`, p.`user_id`, p.`amount`, p.`date_time`, p.`credit_debit`, p.`status`, p.`reason`, p.`created_date`, p.`created_by`, p.`updated_date`, p.`updated_by`, u.first_name from payment_request p LEFT OUTER JOIN users u ON p.user_id = u.id WHERE p.`date_time` between ? and ? ");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		pstmt.setString(1, ApplicationUtil.dateFormat3.format(startDate));
		pstmt.setString(2, ApplicationUtil.dateFormat3.format(endDate));
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		while (rs.next()) {
			PaymentRequestDTO dto = new PaymentRequestDTO();

			dto.setId(rs.getInt(1));
			dto.setUserId(rs.getInt(2));
			dto.setAmount(rs.getFloat(3));
			dto.setDateTime(rs.getString(4));
			dto.setCreditDebit(rs.getString(5));
			dto.setStatus(rs.getString(6));
			dto.setReason(rs.getString(7));
			dto.setCreatedDate(rs.getString(8));
			dto.setCreatedBy(rs.getInt(9));
			dto.setUpdatedDate(rs.getString(10));
			dto.setUpdateBy(rs.getInt(11));
			dto.setUserName(rs.getString(12));
			dtos.add(dto);
		}
		return dtos;
	}

	public List<PaymentRequestDTO> searchPaymentRequest(Connection con,
			int userId, String userName, Date startDate, Date endDate,
			double minAmount, double maxAmount, String status)
			throws SQLException {
		List<PaymentRequestDTO> dtos = new ArrayList<PaymentRequestDTO>();
		StringBuilder query = new StringBuilder();
		query.append("SELECT p.`id`, p.`user_id`, p.`amount`, p.`date_time`, p.`credit_debit`, p.`status`, p.`reason`, p.`created_date`, p.`created_by`, p.`updated_date`, p.`updated_by`, u.first_name, p.order_id from payment_request p LEFT OUTER JOIN users u ON p.user_id = u.id WHERE 1 ");

		if (!Validator.isEmpty(startDate))
			query.append(" AND p.`date_time` > '"
					+ ApplicationUtil.dateFormat3.format(startDate) + "' ");
		if (!Validator.isEmpty(endDate))
			query.append(" AND p.`date_time` < '"
					+ ApplicationUtil.dateFormat3.format(endDate) + "' ");
		if (userId > 0)
			query.append(" AND u.id = '" + userId + "' ");
		if (!Validator.isEmpty(userName))
			query.append(" AND u.email_id = '" + userName + "' ");
		if (minAmount > 0)
			query.append(" AND p.amount >= '" + minAmount + "' ");
		if (maxAmount > 0)
			query.append(" AND p.amount <= '" + maxAmount + "' ");
		if (!Validator.isEmpty(status))
			query.append(" AND p.status = '" + status + "' ");

		query.append("order by p.created_date DESC");
		
		PreparedStatement pstmt = con.prepareStatement(query.toString());

		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		while (rs.next()) {
			PaymentRequestDTO dto = new PaymentRequestDTO();

			dto.setId(rs.getInt(1));
			dto.setUserId(rs.getInt(2));
			dto.setAmount(rs.getFloat(3));
			dto.setDateTime(rs.getString(4));
			dto.setCreditDebit(rs.getString(5));
			dto.setStatus(rs.getString(6));
			dto.setReason(rs.getString(7));
			dto.setCreatedDate(rs.getString(8));
			dto.setCreatedBy(rs.getInt(9));
			dto.setUpdatedDate(rs.getString(10));
			dto.setUpdateBy(rs.getInt(11));
			dto.setUserName(rs.getString(12));
			dto.setOrder_id(rs.getString(13));
			dtos.add(dto);
		}
		return dtos;
	}

	public PaymentRequestDTO fetchPaymentRequestByOrderId(Connection con,
			PaymentRequestDTO dto) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("SELECT `id`, `user_id`, `amount`, `date_time`, `credit_debit`, `status`, `reason`, `created_date`, `created_by`, `updated_date`, `updated_by` from payment_request WHERE `order_id` = ?");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		pstmt.setString(1, dto.getOrder_id());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		if (rs.next()) {
			dto.setId(rs.getInt(1));
			dto.setUserId(rs.getInt(2));
			dto.setAmount(rs.getFloat(3));
			dto.setDateTime(rs.getString(4));
			dto.setCreditDebit(rs.getString(5));
			dto.setStatus(rs.getString(6));
			dto.setReason(rs.getString(7));
			dto.setCreatedDate(rs.getString(8));
			dto.setCreatedBy(rs.getInt(9));
			dto.setUpdatedDate(rs.getString(10));
			dto.setUpdateBy(rs.getInt(11));
		}
		return dto;
	}
	
}
