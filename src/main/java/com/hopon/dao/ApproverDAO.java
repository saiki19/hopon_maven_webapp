package com.hopon.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.hopon.dto.ApproverDTO;
import com.hopon.dto.RideSeekerDTO;
import com.hopon.utils.ApplicationUtil;
import com.hopon.utils.QueryExecuter;
import com.hopon.utils.Validator;
import com.mysql.jdbc.Statement;

public class ApproverDAO {
	public ApproverDTO addApprover(Connection con, ApproverDTO dto) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("INSERT INTO approver(id, bCode, name, hoponId, name2, hoponId2, circleId, updatedDate, updatedBy, createdDate, createdBy, verificationCode, verificationCode2) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, '" +ApplicationUtil.currentTimeStamp()+"', ?, ?, ?)");
		PreparedStatement pstmt = con.prepareStatement(query.toString() ,Statement.RETURN_GENERATED_KEYS);
		pstmt.setString(1, null);
		pstmt.setString(2, dto.getbCode());
		pstmt.setString(3, dto.getName());
		pstmt.setString(4, dto.getHoponId());
		pstmt.setString(5, dto.getName2());
		pstmt.setString(6, dto.getHoponId2());
		pstmt.setInt(7, dto.getCircleId());
		pstmt.setString(8, "");
		pstmt.setString(9, "");
		pstmt.setString(10, dto.getCreatedBy());
		pstmt.setString(11, dto.getVerificationCode());
		pstmt.setString(12, dto.getVerificationCode2());
		pstmt.executeUpdate();
		ResultSet tableKeys = pstmt.getGeneratedKeys();
		tableKeys.next();
		int autoGeneratedID = tableKeys.getInt(1);
		tableKeys.close();
		pstmt.close();
		dto.setId(autoGeneratedID);
		return dto;
	} 
	public ApproverDTO editApprover(Connection con, ApproverDTO dto) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("UPDATE approver set bCode = ?, name = ?, hoponId = ?, name2 = ?, hoponId2 = ?, circleId = ?,  updatedDate = ?, " +
				"updatedBy = ? WHERE id = ?");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		pstmt.setString(1, dto.getbCode());
		pstmt.setString(2, dto.getName());
		pstmt.setString(3, dto.getHoponId());
		pstmt.setString(4, dto.getName2());
		pstmt.setString(5, dto.getHoponId2());
		pstmt.setInt(6, dto.getCircleId());
		pstmt.setString(7, dto.getUpdatedDate());
		pstmt.setString(8, dto.getUpdatedBy());
		pstmt.setInt(9, dto.getId());
		pstmt.executeUpdate();
		pstmt.close();
		return dto;
	} 

	public ApproverDTO findApproverById(Connection con, int approverId) throws SQLException {
		ApproverDTO dto = new ApproverDTO();
		StringBuilder query = new StringBuilder();
		query.append("SELECT id, bCode, name, hoponId, name2, hoponId2, circleId, verificationCode, verificationCode2 from approver WHERE id = '"+approverId+"'");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		while(rs.next()) {
			dto.setId(rs.getInt(1));
			dto.setbCode(rs.getString(2));
			dto.setName(rs.getString(3));
			dto.setHoponId(rs.getString(4));
			dto.setName2(rs.getString(5));
			dto.setHoponId2(rs.getString(6));
			dto.setCircleId(rs.getInt(7));
			dto.setVerificationCode(rs.getString(8));
			dto.setVerificationCode2(rs.getString(9));
		}
		rs.close();
		pstmt.close();
		return dto;
	}
	
	public List<ApproverDTO> findApproverByBCode(Connection con, String bCode) throws SQLException {
		List<ApproverDTO> dtos = new ArrayList<ApproverDTO>();
		StringBuilder query = new StringBuilder();
		query.append("SELECT id, bCode, name, hoponId, name2, hoponId2, circleId, verificationCode, verificationCode2 from approver WHERE bCode like '%"+bCode+"%'");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		while(rs.next()) {
			ApproverDTO dto = new ApproverDTO();
			dto.setId(rs.getInt(1));
			dto.setbCode(rs.getString(2));
			dto.setName(rs.getString(3));
			dto.setHoponId(rs.getString(4));
			dto.setName2(rs.getString(5));
			dto.setHoponId2(rs.getString(6));
			dto.setCircleId(rs.getInt(7));
			dto.setVerificationCode(rs.getString(8));
			dto.setVerificationCode2(rs.getString(9));
			dtos.add(dto);
		}
		rs.close();
		pstmt.close();
		return dtos;
	} 
	public List<ApproverDTO> findApproverByName(Connection con, String name) throws SQLException {
		List<ApproverDTO> dtos = new ArrayList<ApproverDTO>();
		StringBuilder query = new StringBuilder();
		query.append("SELECT id, bCode, name, hoponId, name2, hoponId2, circleId, verificationCode, verificationCode2 from approver WHERE name like '%"+name+"%'");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		while(rs.next()) {
			ApproverDTO dto = new ApproverDTO();
			dto.setId(rs.getInt(1));
			dto.setbCode(rs.getString(2));
			dto.setName(rs.getString(3));
			dto.setHoponId(rs.getString(4));
			dto.setName2(rs.getString(5));
			dto.setHoponId2(rs.getString(6));
			dto.setCircleId(rs.getInt(7));
			dto.setVerificationCode(rs.getString(8));
			dto.setVerificationCode2(rs.getString(9));
			dtos.add(dto);
		}
		rs.close();
		pstmt.close();
		return dtos;
	} 
	public List<ApproverDTO> findApproverForUser(Connection con, int userId) throws SQLException {
		List<ApproverDTO> dtos = new ArrayList<ApproverDTO>();
		StringBuilder query = new StringBuilder();
		query.append("SELECT id, bCode, name, hoponId, name2, hoponId2, circleId, verificationCode, verificationCode2 from approver WHERE circleId In(select CircleId from circle_members WHERE MemberId = '"+userId+"' AND Status = '1')");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		while(rs.next()) {
			ApproverDTO dto = new ApproverDTO();
			dto.setId(rs.getInt(1));
			dto.setbCode(rs.getString(2));
			dto.setName(rs.getString(3));
			dto.setHoponId(rs.getString(4));
			dto.setName2(rs.getString(5));
			dto.setHoponId2(rs.getString(6));
			dto.setCircleId(rs.getInt(7));
			dto.setVerificationCode(rs.getString(8));
			dto.setVerificationCode2(rs.getString(9));
			dtos.add(dto);
		}
		rs.close();
		pstmt.close();
		return dtos;
	} 
	public List<ApproverDTO> findApproverForCircle(Connection con, int circleId) throws SQLException {
		List<ApproverDTO> dtos = new ArrayList<ApproverDTO>();
		StringBuilder query = new StringBuilder();
		query.append("SELECT id, bCode, name, hoponId, name2, hoponId2, circleId from approver WHERE circleId = '"+circleId+"'");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		while(rs.next()) {
			ApproverDTO dto = new ApproverDTO();
			dto.setId(rs.getInt(1));
			dto.setbCode(rs.getString(2));
			dto.setName(rs.getString(3));
			dto.setHoponId(rs.getString(4));
			dto.setName2(rs.getString(5));
			dto.setHoponId2(rs.getString(6));
			dto.setCircleId(rs.getInt(7));
			dtos.add(dto);
		}
		rs.close();
		pstmt.close();
		return dtos;
	} 
	public List<RideSeekerDTO> findRideSeekerDetailsForApprove(Connection con, String emailId) throws SQLException {
		List<RideSeekerDTO> list = new ArrayList<RideSeekerDTO>();
		StringBuilder query = new StringBuilder();
		query.append("select a.id, a.hoponId, a.hoponId2, a.bCode, r.seeker_id, r.start_point, r.destination_point, r.start_tw_early, r.user_id, u.first_name, r.`status`, a.name, a.name2 from ride_seeker_details r, approver a, users u where r.approverID = a.id AND r.`status` IN ('O', 'T') AND r.user_id = u.id AND (a.hoponId = '"+emailId+"' OR a.hoponId2 = '"+emailId+"')");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		while(rs.next()) {
			RideSeekerDTO dto = new RideSeekerDTO();
			dto.setSeekerID(rs.getString(5));
			dto.setFromAddress1(rs.getString(6));
			dto.setToAddress1(rs.getString(7));
			SimpleDateFormat formatter = new SimpleDateFormat(ApplicationUtil.datePattern3);
			SimpleDateFormat formatter1 = new SimpleDateFormat(ApplicationUtil.datePattern2);
			try { 
				Date date = null;
				date = formatter.parse(rs.getString(8));
				dto.setStartdateValue(formatter1.format(date));
				dto.setStartDate(date);
			} catch (ParseException e) {}
			dto.setUserID(rs.getString(9));
			dto.setUserName(rs.getString(10));
			dto.setStatus(rs.getString(11));
			dto.setApproverID(rs.getInt(1));
			dto.setFirstApproverName(rs.getString(12));
			dto.setFirstApproverEmailId(rs.getString(2));
			dto.setSecondApproverName(rs.getString(13));
			dto.setSecondApproverEmailId(rs.getString(3));
			
			//condition for status = T HoponID, HoponId2 both are non empty and emailId matched with hoponId
			if(!Validator.isEmpty(dto.getFirstApproverEmailId()) && !Validator.isEmpty(dto.getSecondApproverEmailId()) && dto.getStatus().equalsIgnoreCase("T") && dto.getFirstApproverEmailId().equals(emailId)) {
				list.add(dto);
			}
			//condition for status = O HoponID, HoponId2 both are non empty and emailId matched with hoponId2
			else if(!Validator.isEmpty(dto.getFirstApproverEmailId()) && !Validator.isEmpty(dto.getSecondApproverEmailId()) && dto.getStatus().equalsIgnoreCase("O") && dto.getSecondApproverEmailId().equals(emailId)) {
				list.add(dto);		
			}
			//condition for status = O HoponID is non empty, HOponID2 is empty and emailId matched with hoponId
			else if(!Validator.isEmpty(dto.getFirstApproverEmailId()) && Validator.isEmpty(dto.getSecondApproverEmailId()) && dto.getStatus().equalsIgnoreCase("O") && dto.getFirstApproverEmailId().equals(emailId)) {
				list.add(dto);
			}
		}
		rs.close();
		pstmt.close();
		return list;
	}
}
