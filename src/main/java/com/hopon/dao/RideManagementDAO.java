package com.hopon.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Connection;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import com.hopon.dto.RideManagementDTO;
import com.hopon.dto.RidePreVehicle;
import com.hopon.dto.UserRegistrationDTO;
import com.hopon.utils.ApplicationUtil;
import com.hopon.utils.LoggerSingleton;
import com.hopon.utils.QueryExecuter;
import com.mysql.jdbc.Statement;


public class RideManagementDAO {
	public RideManagementDTO registerRide(Connection con ,RideManagementDTO rideManagementDTO )throws SQLException{
		System.out.println("RideManagementDAO:"+rideManagementDTO);
		StringBuilder query = new StringBuilder();
		query.append("INSERT INTO rides_management (ride_id,user_id, start_point, via_point, destination_point,ride_cost,start_time,status,vehicleID,MatchInCircle,FlexiTimeBefore,FlexiTimeAfter,FromCity,ToCity,FromPin,ToPin,created_by,created_dt,custom, start_point_latitude, start_point_longitude, via_point_latitude, via_point_longitude, end_point_latitude, end_point_longitude, ride_distance, TWstart_early, TWstart_late, TWend_early, TWend_late) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ");

		PreparedStatement pstmt = con.prepareStatement(query.toString(), Statement.RETURN_GENERATED_KEYS);
		pstmt.setString(1, rideManagementDTO.getRideID());
		pstmt.setString(2, rideManagementDTO.getUserID());
		pstmt.setString(3, rideManagementDTO.getFromAddress1());
		if(rideManagementDTO.getViaPoint() == null || rideManagementDTO.getViaPoint().equals("")) {
			rideManagementDTO.setViaPoint(rideManagementDTO.getFromAddress1());
		}
		pstmt.setString(4, rideManagementDTO.getViaPoint());
		pstmt.setString(5, rideManagementDTO.getToAddress1());
		pstmt.setString(6, rideManagementDTO.getRideCost());//issue
		pstmt.setString(7, rideManagementDTO.getStartdateValue());
		//pstmt.setString(8, rideManagementDTO.getEnddateValue());
		if(rideManagementDTO.getStatus() !=null){
			pstmt.setString(8, rideManagementDTO.getStatus());
		}
		else{
			pstmt.setString(8, "A");//pstmt.setString(8, "1");pstmt.setString(8, "A");
		}
		pstmt.setString(9, rideManagementDTO.getVehicleID());

		if(rideManagementDTO.isAutomatchInCircle()==true){
			pstmt.setString(10, "1");
		}
		else{
			pstmt.setString(10, "0");
		}
		if( rideManagementDTO.getFlexiTimeBefore()!=null){
			pstmt.setString(11, rideManagementDTO.getFlexiTimeBefore().toString());
		}
		if( rideManagementDTO.getFlexiTimeAfter()!=null){
			pstmt.setString(12, rideManagementDTO.getFlexiTimeAfter().toString());
		}
		pstmt.setString(13, rideManagementDTO.getFromAddressCity());
		pstmt.setString(14, rideManagementDTO.getToAddressCity());
		pstmt.setString(15, rideManagementDTO.getFromAddressPin());
		pstmt.setString(16, rideManagementDTO.getToAddressPin());
		pstmt.setString(17, rideManagementDTO.getCreatedBy());
		if(rideManagementDTO.getCreated_dt()!=null){
			pstmt.setString(18, rideManagementDTO.getCreated_dt().toString());
		}
		pstmt.setString(19, rideManagementDTO.getCustom());

		pstmt.setFloat(20, rideManagementDTO.getStartPointLatitude());
		pstmt.setFloat(21, rideManagementDTO.getStartPointLongitude());
		if(rideManagementDTO.getViaPointLatitude() == 0) {
			rideManagementDTO.setViaPointLatitude(rideManagementDTO.getStartPointLatitude());
		}
		if(rideManagementDTO.getViaPointLongitude() == 0) {
			rideManagementDTO.setViaPointLongitude(rideManagementDTO.getStartPointLongitude());
		}
		pstmt.setFloat(22, rideManagementDTO.getViaPointLatitude());
		pstmt.setFloat(23, rideManagementDTO.getViaPointLongitude());
		pstmt.setFloat(24, rideManagementDTO.getEndPointLatitude());
		pstmt.setFloat(25, rideManagementDTO.getEndPointLongitude());

		pstmt.setFloat(26, rideManagementDTO.getRideDistance());
		pstmt.setString(27, rideManagementDTO.getStartDateEarly());//issue
		pstmt.setString(28, rideManagementDTO.getStartDateLate());
		pstmt.setString(29, rideManagementDTO.getEndDateEarly());
		pstmt.setString(30, rideManagementDTO.getEndDateLate());

		pstmt.executeUpdate();
		//rideManagementDTO.setRideID(pstmt.getGeneratedKeys().getString(1));
		ResultSet tableKeys = pstmt.getGeneratedKeys();
		tableKeys.next();
		int autoGeneratedID = tableKeys.getInt(1);
		tableKeys.close();
		pstmt.close();

		rideManagementDTO.setRideID(String.valueOf(autoGeneratedID));
		return rideManagementDTO;
	}



	public List<RideManagementDTO> findAllRideManagerList(Connection con , String userID )throws SQLException{

		List<RideManagementDTO>  rideManagerList = new ArrayList<RideManagementDTO>();
		StringBuilder query = new StringBuilder();
		query.append(" SELECT  rides_management.ride_id,rides_management.start_point, rides_management.via_point," +
				"rides_management.destination_point,rides_management.ride_cost,rides_management.start_time," +
				"rides_management.status,vehicles_master.registration_no,trip_frequency.Trip_Freq_P,trip_frequency.Days," +
				"rides_management.flexiTimeBefore, rides_management.flexiTimeAfter, rides_management.created_by, " +
				"rides_management.custom FROM rides_management,vehicles_master,trip_frequency where " +
				"rides_management.user_id = '"+userID+"' and rides_management.vehicleID = vehicles_master.id and  " +
				"rides_management.ride_id = trip_frequency.ride_management_id and rides_management.status != 'I' and " +
				"vehicles_master.status = 'A' AND TIMESTAMPDIFF(SECOND,rides_management.start_time,'" +ApplicationUtil.currentTimeStamp()+"') < 0 ");

		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());

		SimpleDateFormat formatter = new SimpleDateFormat(ApplicationUtil.datePattern3);
		SimpleDateFormat formatter1 = new SimpleDateFormat(ApplicationUtil.datePattern9);
		SimpleDateFormat formatter2 = new SimpleDateFormat(ApplicationUtil.datePattern10);
		//Fri Jan 10 00:32:23 PST 2014
		//E MMM dd H:m:s zzz yyyy

		while(rs.next()) {

			RideManagementDTO dto = new RideManagementDTO();

			dto.setRideID(rs.getString(1));
			dto.setFromAddress1(rs.getString(2));
			dto.setToAddress1(rs.getString(4));
			if(rs.getString(6)!=null){
				try {
					final Date date = formatter.parse(rs.getString(6));
					dto.setStartdateValue(formatter1.format(date));
				} catch (ParseException e) {
					LoggerSingleton.getInstance().error(e.getStackTrace()[0].getClassName()+"->"+e.getStackTrace()[0].getMethodName()+"() : "+e.getStackTrace()[0].getLineNumber()+" :: "+"Date is : "+rs.getString(6)+"."+e.getMessage());
				}
			}
			dto.setStatus(rs.getString(7));
			dto.setVehicleID(rs.getString(8));
			dto.setFrequencyID(rs.getString(9));
			dto.setFrequencyinweek(rs.getString(10).substring(1,rs.getString(10).length()-1));

			try {
				dto.setFlexiTimeBefore(formatter2.parse(rs.getString(11)));
			} catch (ParseException e) {
				LoggerSingleton.getInstance().error(e.getStackTrace()[0].getClassName()+"->"+e.getStackTrace()[0].getMethodName()+"() : "+e.getStackTrace()[0].getLineNumber()+" :: "+"Date is : "+rs.getString(11)+"."+e.getMessage());
			}
			try {
				dto.setFlexiTimeAfter(formatter2.parse(rs.getString(12)));
			} catch (ParseException e) {
				LoggerSingleton.getInstance().error(e.getStackTrace()[0].getClassName()+"->"+e.getStackTrace()[0].getMethodName()+"() : "+e.getStackTrace()[0].getLineNumber()+" :: "+"Date is : "+rs.getString(12)+"."+e.getMessage());
			}		
			dto.setCreatedBy(rs.getString(13));
			dto.setCustom(rs.getString(14));
			rideManagerList.add(dto);
			System.out.println("Ridemanagae list :"+rideManagerList);
		}
		rs.close();
		pstmt.close();
		return rideManagerList;
	}

	public RideManagementDTO cancleRide(Connection con ,RideManagementDTO rideDTO)throws SQLException {

		StringBuilder query = new StringBuilder();
		query.append("UPDATE rides_management SET  status = '" + rideDTO.getStatus() + "', updated_dt = '" +ApplicationUtil.currentTimeStamp()+"' where ride_id ='" + rideDTO.getRideID() + "'");

		PreparedStatement	pstmt = con.prepareStatement(query.toString());
		pstmt.executeUpdate();
		pstmt.close();

		return rideDTO;
	}



	public RideManagementDTO getRideManagerData(Connection con, String rideID) throws SQLException {
		StringBuilder query = new StringBuilder();

		/*
		 * in the case when poolrequest will not have entry for ride_seeker_details.
		 * 
select ride_seeker_details.ride_match_rideid, rides_management.user_id, rides_management.vehicleID, rides_management.start_point,
rides_management.destination_point, rides_management.start_time, users.first_name, rides_management.status 
from ride_seeker_details, rides_management, users where ride_seeker_details.seeker_id = '"+ rideID +"' AND 
ride_seeker_details.ride_match_rideid = rides_management.ride_id AND rides_management.user_id = users.id
		 */
		query.append("select rides_management.ride_id, rides_management.user_id, rides_management.vehicleID, rides_management.start_point, rides_management.destination_point, rides_management.start_time, users.first_name, rides_management.status from rides_management LEFT OUTER JOIN users ON rides_management.user_id = users.id where rides_management.ride_id = '"+rideID+"'");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		RideManagementDTO dto = new RideManagementDTO();
		while(rs.next()) {
			dto.setRideID(rs.getString(1));
			dto.setUserID(rs.getString(2));
			dto.setVehicleID(rs.getString(3));
			dto.setFromAddress1(rs.getString(4));
			dto.setToAddress1(rs.getString(5));
			SimpleDateFormat formatter = new SimpleDateFormat(ApplicationUtil.datePattern3);
			SimpleDateFormat formatter1 = new SimpleDateFormat(ApplicationUtil.datePattern9);
			try {
				dto.setStartDate(formatter.parse(rs.getString(6)));
				dto.setStartdateValue(formatter1.format(dto.getStartDate()));
			} catch (ParseException e) {
				LoggerSingleton.getInstance().error(e.getStackTrace()[0].getClassName()+"->"+e.getStackTrace()[0].getMethodName()+"() : "+e.getStackTrace()[0].getLineNumber()+" :: "+"Date is : "+rs.getString(6)+"."+e.getMessage());
			}
			dto.setCreatedBy(rs.getString(7));
			dto.setStatus(rs.getString(8));
		}
		rs.close();
		pstmt.close();
		return dto;
	}

	public RideManagementDTO getRideManagerDataDirect(Connection con, String rideID) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("select rides_management.ride_id, rides_management.user_id, rides_management.vehicleID, " +
				"rides_management.start_point,rides_management.destination_point, rides_management.start_time, " +
				"users.id, rides_management.status, rides_management.start_point_latitude, rides_management.start_point_longitude, " +
				"rides_management.end_point_latitude, rides_management.end_point_longitude, rides_management.via_point_latitude, " +
				"rides_management.via_point_longitude, vehicles_master.registration_no from rides_management LEFT OUTER JOIN vehicles_master ON rides_management.vehicleID = vehicles_master.id, users " +
				"where rides_management.ride_id = '"+ rideID +"' AND " +
				//"where pool_requests.ride_id = '"+ rideID +"' AND " +
				"rides_management.user_id = users.id");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		RideManagementDTO dto = new RideManagementDTO();
		while(rs.next()) {
			dto.setRideID(rs.getString(1));
			dto.setUserID(rs.getString(2));
			dto.setVehicleID(rs.getString(3));
			dto.setFromAddress1(rs.getString(4));
			dto.setToAddress1(rs.getString(5));
			SimpleDateFormat formatter = new SimpleDateFormat(ApplicationUtil.datePattern3);
			SimpleDateFormat formatter1 = new SimpleDateFormat(ApplicationUtil.datePattern9);
			try {
				dto.setStartDate(formatter.parse(rs.getString(6)));
				dto.setStartdateValue(formatter1.format(dto.getStartDate()));
			} catch (ParseException e) {
				LoggerSingleton.getInstance().error(e.getStackTrace()[0].getClassName()+"->"+e.getStackTrace()[0].getMethodName()+"() : "+e.getStackTrace()[0].getLineNumber()+" :: "+"Date is : "+rs.getString(6)+"."+e.getMessage());
			}
			dto.setCreatedBy(rs.getString(7));
			dto.setStatus(rs.getString(8));
			
			dto.setStartPointLatitude(rs.getFloat(9));
			dto.setStartPointLongitude(rs.getFloat(10));
			dto.setEndPointLatitude(rs.getFloat(11));
			dto.setEndPointLongitude(rs.getFloat(12));
			dto.setViaPointLatitude(rs.getFloat(13));
			dto.setViaPointLongitude(rs.getFloat(14));
			dto.setVehicleRegno(rs.getString(15));			
		}
		rs.close();
		pstmt.close();
		return dto;
	}

	public List<RideManagementDTO> fetchCompletedRideManagementList(Connection con) throws SQLException {
		List<RideManagementDTO>  rideManagerList = new ArrayList<RideManagementDTO>();
		StringBuilder query = new StringBuilder();
		query.append(" SELECT  rides_management.ride_id,rides_management.start_point, rides_management.via_point," +
				"rides_management.destination_point,rides_management.ride_cost,rides_management.start_time," +
				"rides_management.status,vehicles_master.registration_no,trip_frequency.Trip_Freq_P,trip_frequency.Days," +
				"rides_management.flexiTimeBefore, rides_management.flexiTimeAfter, rides_management.created_by, " +
				"rides_management.custom " +
				"FROM rides_management,vehicles_master,trip_frequency " +
				"where rides_management.`status` = 'I' AND  DATEDIFF('" +ApplicationUtil.currentTimeStamp()+"', rides_management.TWstart_early) = 0 " +
				"AND rides_management.vehicleID = vehicles_master.id and  " +
		"rides_management.ride_id = trip_frequency.ride_management_id and vehicles_master.status = 'A' ");

		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());

		SimpleDateFormat formatter = new SimpleDateFormat(ApplicationUtil.datePattern3);
		SimpleDateFormat formatter1 = new SimpleDateFormat(ApplicationUtil.datePattern9);
		SimpleDateFormat formatter2 = new SimpleDateFormat(ApplicationUtil.datePattern10);
		//Fri Jan 10 00:32:23 PST 2014
		//E MMM dd H:m:s zzz yyyy

		while(rs.next()) {

			RideManagementDTO dto = new RideManagementDTO();

			dto.setRideID(rs.getString(1));
			dto.setFromAddress1(rs.getString(2));
			dto.setToAddress1(rs.getString(4));
			if(rs.getString(6)!=null){
				try {
					final Date date = formatter.parse(rs.getString(6));
					dto.setStartdateValue(formatter1.format(date));
				}
				catch (ParseException e) {
					LoggerSingleton.getInstance().error(e.getStackTrace()[0].getClassName()+"->"+e.getStackTrace()[0].getMethodName()+"() : "+e.getStackTrace()[0].getLineNumber()+" :: "+"Date is : "+rs.getString(6)+"."+e.getMessage());
				}
			}
			dto.setStatus(rs.getString(7));
			dto.setVehicleID(rs.getString(8));
			dto.setFrequencyID(rs.getString(9));
			dto.setFrequencyinweek(rs.getString(10).substring(1,rs.getString(10).length()-1));

			try {
				dto.setFlexiTimeBefore(formatter2.parse(rs.getString(11)));
			} catch (ParseException e) {
				LoggerSingleton.getInstance().error(e.getStackTrace()[0].getClassName()+"->"+e.getStackTrace()[0].getMethodName()+"() : "+e.getStackTrace()[0].getLineNumber()+" :: "+"Date is : "+rs.getString(11)+"."+e.getMessage());
			}
			try {
				dto.setFlexiTimeAfter(formatter2.parse(rs.getString(12)));
			} catch (ParseException e) {
				LoggerSingleton.getInstance().error(e.getStackTrace()[0].getClassName()+"->"+e.getStackTrace()[0].getMethodName()+"() : "+e.getStackTrace()[0].getLineNumber()+" :: "+"Date is : "+rs.getString(12)+"."+e.getMessage());
			}
			dto.setCreatedBy(rs.getString(13));
			dto.setCustom(rs.getString(14));
			rideManagerList.add(dto);
			System.out.println("Ride ManagerList:"+rideManagerList);
		}
		rs.close();
		pstmt.close();
		return rideManagerList;
	}



	public boolean checkDuplicacy(Connection con, RideManagementDTO rideManagementDTO) throws SQLException {
		StringBuilder query = new StringBuilder();

		if(rideManagementDTO.getVehicleID() != null){
			query.append("SELECT count(*) from rides_management WHERE user_id = ? AND start_point = ? AND destination_point = ? AND " +
			" start_time = ? AND FromCity = ? AND ToCity = ? AND FromPin = ? AND ToPin = ? AND vehicleID = ?");
		} else {
			query.append("SELECT count(*) from rides_management WHERE user_id = ? AND start_point = ? AND destination_point = ? AND " +
			" start_time = ? AND FromCity = ? AND ToCity = ? AND FromPin = ? AND ToPin = ?");
		}

		PreparedStatement pstmt = con.prepareStatement(query.toString());
		pstmt.setString(1, rideManagementDTO.getUserID());
		pstmt.setString(2, rideManagementDTO.getFromAddress1());
		pstmt.setString(3, rideManagementDTO.getToAddress1());
		pstmt.setString(4, rideManagementDTO.getStartdateValue());

		pstmt.setString(5, rideManagementDTO.getFromAddressCity());
		pstmt.setString(6, rideManagementDTO.getToAddressCity());
		pstmt.setString(7, rideManagementDTO.getFromAddressPin());
		pstmt.setString(8, rideManagementDTO.getToAddressPin());
		if(rideManagementDTO.getVehicleID() != null){
			pstmt.setString(9, rideManagementDTO.getVehicleID());
		}
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		boolean test = false;
		if(rs.next()) {
			if(rs.getInt(1) > 0) {
				test = true;
			}
		}
		rs.close();
		pstmt.close();
		return test;
	}



	public void makeRideCancelForUser(Connection con, UserRegistrationDTO userRegistrationDto) throws SQLException {
		StringBuilder query = new StringBuilder();
		//query.append("UPDATE rides_management SET status = '0' WHERE user_id = " + userRegistrationDto.getId());
		query.append("UPDATE rides_management SET status = 'I', updated_dt = '" +ApplicationUtil.currentTimeStamp()+"' WHERE user_id = " + userRegistrationDto.getId());

		PreparedStatement	pstmt = con.prepareStatement(query.toString());
		pstmt.executeUpdate();
		pstmt.close();
	}



	public List<RidePreVehicle> fetchRidePreVehicleList(Connection con, String date, int userId) throws SQLException {
		List<RidePreVehicle> list = new ArrayList<RidePreVehicle>();
		StringBuilder query = new StringBuilder();
		query.append("select vehicleID, v.registration_no, v.Capacity, (select count(*) from pool_requests p WHERE p.ride_id = r1.ride_id) as filled,start_point, destination_point, start_time from rides_management r1 left outer join vehicles_master v on r1.vehicleID = v.id WHERE v.user_id = '"+userId+"' AND date(r1.start_time) = date('"+date+"')");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());

		SimpleDateFormat formatter = new SimpleDateFormat(ApplicationUtil.datePattern8);

		while(rs.next()) {
			RidePreVehicle modal = new RidePreVehicle();
			modal.setVehicleId(rs.getInt(1));
			modal.setVehicleName(rs.getString(2));
			modal.setCapacity(rs.getString(3));
			modal.setFilled(rs.getString(4));
			modal.setFrom(rs.getString(5));
			modal.setTo(rs.getString(6));
			String dateTemp = "";
			try {
				dateTemp = new SimpleDateFormat(ApplicationUtil.datePattern13).format(new SimpleDateFormat(ApplicationUtil.datePattern3).parse(rs.getString(7)));
			} catch (ParseException e) {}
			modal.setDate(dateTemp);
			list.add(modal);
			System.out.println("List from the riede manager:"+list);
		}
		rs.close();
		pstmt.close();
		return list;
	}
}

