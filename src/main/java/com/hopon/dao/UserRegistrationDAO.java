package com.hopon.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.hopon.dto.UserRegistrationDTO;
import com.hopon.utils.ApplicationUtil;
import com.hopon.utils.QueryExecuter;
import com.hopon.utils.ServerUtility;
import com.hopon.utils.Validator;
import com.hopon.dto.*;
import com.mysql.jdbc.Statement;



public class UserRegistrationDAO {
	public UserRegistrationDTO registerUser(Connection con,UserRegistrationDTO userRegistrationDTO, String senderId) throws SQLException {
		System.out.println("UserRegistrationDAO Method:"+userRegistrationDTO+"+"+senderId);
		StringBuilder query = new StringBuilder();
		query.append("INSERT INTO users (id,first_name, address, mobile_no, birthdate, gender, email_id, password,travel,status,city, pincode, last_name, defaultTimeSlice, is_verified, verification_code, signup_type, created_by, state, country, totalCredit, totalGreenMiles) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ");

		PreparedStatement pstmt = con.prepareStatement(query.toString() ,Statement.RETURN_GENERATED_KEYS);
		pstmt.setString(1, userRegistrationDTO.getId());
		pstmt.setString(2, userRegistrationDTO.getFirst_name());
		pstmt.setString(3, userRegistrationDTO.getAddress());
		pstmt.setString(4, userRegistrationDTO.getMobile_no());
		pstmt.setString(5, userRegistrationDTO.getBirthdate());
		if(userRegistrationDTO.getGender().equalsIgnoreCase("m")) {
			userRegistrationDTO.setGender("male");
		} else if(userRegistrationDTO.getGender().equalsIgnoreCase("f")) {
			userRegistrationDTO.setGender("femalse");
		}
		pstmt.setString(6, userRegistrationDTO.getGender());
		pstmt.setString(7, userRegistrationDTO.getEmail_id());
		pstmt.setString(8, ApplicationUtil.passwordEncrypt(userRegistrationDTO.getPassword()));
		pstmt.setString(9, userRegistrationDTO.getTravel());
		if(Validator.isEmpty(userRegistrationDTO.getStatus())) {
			pstmt.setString(10, "A");
		} else {
			pstmt.setString(10, userRegistrationDTO.getStatus());
		}
		pstmt.setInt(11, userRegistrationDTO.getCityId());
		pstmt.setString(12, userRegistrationDTO.getPincode());
		pstmt.setString(13, userRegistrationDTO.getLast_name());
		if(userRegistrationDTO.getDefaultTimeSlice() == null || userRegistrationDTO.getDefaultTimeSlice().length() == 0) {
			pstmt.setString(14, "00:10");
		} else {
			pstmt.setString(14, userRegistrationDTO.getDefaultTimeSlice());
		}
		if(Validator.isEmpty(userRegistrationDTO.getIsVerified())) {
			pstmt.setString(15, '0' + "");
		} else {
			pstmt.setString(15, userRegistrationDTO.getIsVerified() + "");
		}
		if(Validator.isEmpty(userRegistrationDTO.getVerificationCode())) {
			pstmt.setString(16, ServerUtility.randomString(15));
		} else {
			pstmt.setString(16, userRegistrationDTO.getVerificationCode());
		}
		pstmt.setInt(17, userRegistrationDTO.getSignupType());
		pstmt.setString(18, senderId);
		pstmt.setString(19, userRegistrationDTO.getState());
		pstmt.setString(20, userRegistrationDTO.getCountry());
		pstmt.setFloat(21, userRegistrationDTO.getTotalCredit());
		pstmt.setFloat(22, userRegistrationDTO.getTotalGreenMiles());

		pstmt.executeUpdate();
		ResultSet tableKeys = pstmt.getGeneratedKeys();
		tableKeys.next();
		int autoGeneratedID = tableKeys.getInt(1);
		tableKeys.close();
		pstmt.close();
		userRegistrationDTO.setId(String.valueOf(autoGeneratedID));
		return userRegistrationDTO;
	}
	public UserRegistrationDTO validateUser(Connection con, UserRegistrationDTO userDTO) throws SQLException {
		UserRegistrationDTO result = new UserRegistrationDTO();
		StringBuilder query = new StringBuilder();
		query.append ("Select u.id,u.first_name,u.email_id,u.travel,u.address,u.mobile_no, u.birthdate,u.gender,u.city,u.pincode,u.last_name, u.defaultTimeSlice, u.status, u.state, u.country, u.totalCredit, u.totalGreenMiles, t.city_name, u.latitude, u.longitude from users u LEFT OUTER JOIN tbl_citylist t ON t.city_id = u.city where  u.email_id = '" + userDTO.getEmail_id() + "' and u.password = '" + ApplicationUtil.passwordEncrypt(userDTO.getPassword()) + "'" );
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		if (rs.next()){
			result.setId(rs.getString(1));
			result.setFirst_name(rs.getString(2));
			result.setEmail_id(rs.getString(3));
			//result.setPassword(rs.getString(4));
			result.setPassword(userDTO.getPassword());
			result.setTravel(rs.getString(4));
			result.setAddress(rs.getString(5));
			result.setMobile_no(rs.getString(6));
			result.setBirthdate(rs.getString(7));
			result.setGender(rs.getString(8));
			result.setCityId(rs.getInt(9));
			result.setPincode(rs.getString(10));
			result.setLast_name(rs.getString(11));
			result.setDefaultTimeSlice(rs.getString(12));
			result.setStatus(rs.getString(13));
			result.setState(rs.getString(14));
			result.setCountry(rs.getString(15));
			result.setTotalCredit(rs.getFloat(16));
			
		
			result.setTotalGreenMiles(rs.getFloat(17));
			result.setCity(rs.getString(18));
			result.setLatitude(rs.getFloat(19));
			result.setLongitude(rs.getFloat(20));
		} else {
			userDTO = result;
		}

		//if (rs.isAfterLast()) rs.close();
		rs.close();
		pstmt.close();
		return result;
	}

	public UserRegistrationDTO closeUserAcount(Connection con, UserRegistrationDTO userDTO, String senderId) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append ("UPDATE users set status = 'I', updated_by = '"+senderId+"', updated_dt = '" +ApplicationUtil.currentTimeStamp()+"' WHERE id = '"+userDTO.getId()+"'" );//status 2->I
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		userDTO.setStatus("I");
		pstmt.executeUpdate();
		pstmt.close();
		return userDTO;
	}

	public UserRegistrationDTO confirmOrDeclineUser(Connection con ,UserRegistrationDTO userdto, String senderId)throws SQLException {

		StringBuilder query = new StringBuilder();
		query.append("UPDATE users SET  status = '" + userdto.getStatus() + "', updated_by = '"+senderId+"', updated_dt = '" +ApplicationUtil.currentTimeStamp()+"' where id ='" + userdto.getId() + "'");

		PreparedStatement	pstmt = con.prepareStatement(query.toString());
		pstmt.executeUpdate();
		pstmt.close();

		return userdto;
	}
	
	public UserRegistrationDTO updateUserPassword(Connection con,UserRegistrationDTO userRegistrationDTO, String senderId) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("UPDATE users SET password= '" + ApplicationUtil.passwordEncrypt(userRegistrationDTO.getPassword()) + "', updated_by = '"+senderId+"', updated_dt = '" +ApplicationUtil.currentTimeStamp()+"' where id ='" + userRegistrationDTO.getId() + "'");
		PreparedStatement	pstmt = con.prepareStatement(query.toString());
		pstmt.executeUpdate();
		pstmt.close();
		return userRegistrationDTO;
	}
	
	public UserRegistrationDTO updateUser(Connection con,UserRegistrationDTO userRegistrationDTO, String senderId) throws SQLException {
		if(userRegistrationDTO.getGender().equalsIgnoreCase("m")) {
			userRegistrationDTO.setGender("male");
		} else if(userRegistrationDTO.getGender().equalsIgnoreCase("f")) {
			userRegistrationDTO.setGender("femalse");
		}
		StringBuilder query = new StringBuilder();
		query.append("UPDATE users SET first_name = '" + userRegistrationDTO.getFirst_name() + "', last_name = '"+ userRegistrationDTO.getLast_name() +"', address= '" + userRegistrationDTO.getAddress() + "'," +
				" mobile_no = '" + userRegistrationDTO.getMobile_no() + "',birthdate= '" + userRegistrationDTO.getBirthdate() + "', gender= '" + userRegistrationDTO.getGender() + "'," +
				" email_id= '" + userRegistrationDTO.getEmail_id() + "', password= '" + ApplicationUtil.passwordEncrypt(userRegistrationDTO.getPassword()) + "'" +
				",travel= '" + userRegistrationDTO.getTravel() + "',status= 'A',city= '" + userRegistrationDTO.getCityId() + "',pincode='"+ userRegistrationDTO.getPincode() +"', defaultTimeSlice = ?" +
				", state = '"+userRegistrationDTO.getState()+"', country = '"+userRegistrationDTO.getCountry()+"', updated_by = '"+senderId+"', updated_dt = '" +ApplicationUtil.currentTimeStamp()+"' where id ='" + userRegistrationDTO.getId() + "'");

		PreparedStatement	pstmt = con.prepareStatement(query.toString());
		if(userRegistrationDTO.getDefaultTimeSlice() == null || userRegistrationDTO.getDefaultTimeSlice().length() == 0) {
			pstmt.setString(1, "00:10");
		} else {
			pstmt.setString(1, userRegistrationDTO.getDefaultTimeSlice());
		}
		pstmt.executeUpdate();
		pstmt.close();
		return userRegistrationDTO;
	}
	public List<UserRegistrationDTO> getAllUser(Connection con,String prefix, int limit)throws SQLException{
		StringBuilder query = new StringBuilder();
		query.append("Select ID,first_name,last_name,address, email_id from users where 1");
		if (prefix == null || prefix.equals("")){
			query.append(" ");
		}else{
			query.append(" and (first_name like '%"  + prefix + "%'");
			query.append(" or last_name like '%"  + prefix + "%' or CONCAT(first_name, ' ', last_name) like '%"+prefix+"%')");
		}
		if(limit > 0) query.append(" limit " + limit);
		List<UserRegistrationDTO> alluser = new ArrayList<UserRegistrationDTO>();
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		while(rs.next()) {
			UserRegistrationDTO dto = new UserRegistrationDTO();
			dto.setId(rs.getString(1));
			dto.setFirst_name(rs.getString(2));
			dto.setLast_name(rs.getString(3));
			dto.setAddress(rs.getString(4));
			dto.setEmail_id(rs.getString(5));
			alluser.add(dto);
		}
		rs.close();
		pstmt.close();
		return alluser;

	}
	public boolean testUniqueMobileNumber(Connection con, String mobileNumber, int excludedUserId) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("Select count(*) from users where mobile_no = '"+ mobileNumber +"' ");
		if(excludedUserId > 0) query.append(" AND users.id != '" + excludedUserId + "'");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		boolean test = false;
		while(rs.next()) {
			if(rs.getInt(1) > 0) test = true;
		}
		rs.close();
		pstmt.close();
		return test;
	}
	public boolean testEmail(Connection con, String email) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("Select count(*) from users where email_id = '"+ email +"' AND status = 'A'");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		boolean test = false;
		while(rs.next()) {
			if(rs.getInt(1) > 0) test = true;
		}
		rs.close();
		pstmt.close();
		return test;
	}
	public String testEmailAllStatus(Connection con, String email) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("Select status from users where email_id = '"+ email +"'");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		String test = "N";
		if(rs.next()) {
			test = rs.getString(1).toUpperCase(); 
		}
		rs.close();
		pstmt.close();
		return test;
	}
	public UserRegistrationDTO UpdateRandomPassword(Connection con , String userName, String randomPassword, String senderId)throws SQLException {
		UserRegistrationDTO userdto = new UserRegistrationDTO();
		StringBuilder query = new StringBuilder();
		query.append("UPDATE users SET  password = '" + ApplicationUtil.passwordEncrypt(randomPassword) + "', updated_by = '"+senderId+"', updated_dt = '" +ApplicationUtil.currentTimeStamp()+"' where email_id ='" + userName + "'");

		PreparedStatement pstmt = con.prepareStatement(query.toString());
		pstmt.executeUpdate();
		pstmt.close();

		query = new StringBuilder();
		query.append ("Select u.id,u.first_name,u.email_id,u.password,u.travel,u.address,u.mobile_no, u.birthdate,u.gender,u.city,u.pincode,u.last_name,u.defaultTimeSlice, t.city_name from users u LEFT OUTER JOIN tbl_citylist t ON t.city_id = u.city where u.email_id = '" + userName + "'" );
		pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		if (rs.next()){
			userdto.setId(rs.getString(1));
			userdto.setFirst_name(rs.getString(2));
			userdto.setEmail_id(rs.getString(3));
			//userdto.setPassword(rs.getString(4));
			userdto.setPassword(randomPassword);
			userdto.setTravel(rs.getString(5));
			userdto.setAddress(rs.getString(6));
			userdto.setMobile_no(rs.getString(7));
			userdto.setBirthdate(rs.getString(8));
			userdto.setGender(rs.getString(9));
			userdto.setCityId(rs.getInt(10));
			userdto.setPincode(rs.getString(11));
			userdto.setLast_name(rs.getString(12));
			userdto.setDefaultTimeSlice(rs.getString(13));
			userdto.setCity(rs.getString(14));
		} else {
			userdto = null;
		}
		rs.close();
		pstmt.close();
		return userdto;
	}
	public List<UserRegistrationDTO> getAllUserById(Connection con, List<Integer> userId) throws SQLException {
		StringBuilder query = new StringBuilder();
		String inCondition = "";
		for(int i:userId) {
			inCondition += i + ",";
		}
		query.append("Select ID,email_id, first_name, mobile_no, last_name, address, gender, status from users where id IN ("+ inCondition +"0)");

		List<UserRegistrationDTO> alluser = new ArrayList<UserRegistrationDTO>();
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		while(rs.next()) {
			UserRegistrationDTO dto = new UserRegistrationDTO();
			dto.setId(rs.getString(1));
			dto.setEmail_id(rs.getString(2));
			dto.setFirst_name(rs.getString(3));
			dto.setMobile_no(rs.getString(4));
			dto.setLast_name(rs.getString(5));
			dto.setAddress(rs.getString(6));
			dto.setGender(rs.getString(7));
			dto.setStatus(rs.getString(8));
			alluser.add(dto);
		}
		rs.close();
		pstmt.close();
		return alluser;
	}
	public UserRegistrationDTO getUserById(Connection con, int userId) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("Select u.ID,u.email_id, u.first_name, u.mobile_no, u.last_name, u.address, u.gender, u.city, u.pincode, u.state, u.country, t.city_name, u.latitude, u.longitude from users u LEFT OUTER JOIN tbl_citylist t ON u.city = t.city_id where id = '"+userId+"'");

		UserRegistrationDTO dto = new UserRegistrationDTO();
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		if(rs.next()) {
			dto.setId(rs.getString(1));
			dto.setEmail_id(rs.getString(2));
			dto.setFirst_name(rs.getString(3));
			dto.setMobile_no(rs.getString(4));
			dto.setLast_name(rs.getString(5));
			dto.setAddress(rs.getString(6));
			dto.setGender(rs.getString(7));
			dto.setCityId(rs.getInt(8));
			dto.setPincode(rs.getString(9));
			dto.setState(rs.getString(10));
			dto.setCountry(rs.getString(11));
			dto.setCity(rs.getString(12));
			dto.setLatitude(rs.getFloat(13));
			dto.setLongitude(rs.getFloat(14));
		}
		rs.close();
		pstmt.close();
		return dto;
	}
	public List<UserRegistrationDTO> allUserOfAcircle(Connection con ,String userID)throws SQLException{
		List<UserRegistrationDTO> allUser = new ArrayList<UserRegistrationDTO>();
		StringBuilder query = new StringBuilder();
		query.append("select users.id , users.first_name,users.address from users, circle_members,circles where circles.CircleOwner_Member_Id_P='"+userID+"' and circles.Circle_Id = circle_members.CircleId and circle_members.MemberId = users.id and circle_members.Status = 1 AND users.`status` = 'A'");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		while(rs.next()) {
			UserRegistrationDTO dto = new UserRegistrationDTO();
			dto.setId(rs.getString(1));
			dto.setFirst_name(rs.getString(2));
			dto.setAddress(rs.getString(3));
			allUser.add(dto);
		}
		rs.close();
		pstmt.close();
		return allUser;
	}
	public UserRegistrationDTO findUserByEmail(Connection con ,String emailId)throws SQLException{
		UserRegistrationDTO dto = new UserRegistrationDTO();
		StringBuilder query = new StringBuilder();
		query.append("select id, email_id, mobile_no, gender, birthdate, address from users WHERE email_id = '"+emailId+"' AND status = 'A'");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		if(rs.next()) {
			dto.setId(rs.getString(1));
			dto.setEmail_id(rs.getString(2));
			dto.setMobile_no(rs.getString(3));
			dto.setGender(rs.getString(4));
			dto.setBirthdate(rs.getString(5));
			dto.setAddress(rs.getString(6));
			dto.setStatus("A");
		}
		rs.close();
		pstmt.close();
		return dto;
	}
	public boolean verifyUser(Connection con ,UserRegistrationDTO dto) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("UPDATE users set `status` = 'A', is_verified = '1' WHERE email_id = ? AND status = 'P' AND verification_code = ?");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		pstmt.setString(1, dto.getEmail_id());
		pstmt.setString(2, dto.getVerificationCode());
		pstmt.executeUpdate();
		pstmt.close();	
		
		UserRegistrationDTO dtoTemp = findUserByEmail(con, dto.getEmail_id());
		
		if(dtoTemp != null && dtoTemp.getEmail_id() != null) {
			return true;
		} else {
			return false;
		}
	}
	public UserRegistrationDTO findDriverDtoByRideId(Connection con, String rideId) throws SQLException {
		UserRegistrationDTO dto = new UserRegistrationDTO();
		StringBuilder query = new StringBuilder();
		
		//In the case when driver is linked with a user.
		query.append("select u.id, u.email_id, u.mobile_no, u.gender, u.birthdate, u.address, u.first_name from rides_management r LEFT OUTER JOIN vehicles_master v ON r.vehicleID = v.id LEFT OUTER JOIN users u ON v.driverid = u.id where r.ride_id = '"+rideId+"'");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		if(rs.next()) {
			dto.setId(rs.getString(1));
			dto.setEmail_id(rs.getString(2));
			dto.setMobile_no(rs.getString(3));
			dto.setGender(rs.getString(4));
			dto.setBirthdate(rs.getString(5));
			dto.setAddress(rs.getString(6));
			dto.setFirst_name(rs.getString(7));
		}
		rs.close();
		pstmt.close();
		
		if(Validator.isEmpty(dto.getEmail_id())) {
			query = new StringBuilder();
			//In the case when driver is not linked with any user.
			query.append("select u.id, u.email_id, u.mobile_no, u.gender, u.birthdate, u.address, u.first_name from rides_management r LEFT OUTER JOIN vehicles_master v ON r.vehicleID = v.id LEFT OUTER JOIN users u ON v.user_id = u.id where r.ride_id = '"+rideId+"'");
			pstmt = con.prepareStatement(query.toString());
			rs = QueryExecuter.getResultSet(pstmt, query.toString());
			if(rs.next()) {
				dto.setId(rs.getString(1));
				dto.setEmail_id(rs.getString(2));
				dto.setMobile_no(rs.getString(3));
				dto.setGender(rs.getString(4));
				dto.setBirthdate(rs.getString(5));
				dto.setAddress(rs.getString(6));
				dto.setFirst_name(rs.getString(7));
			}
			rs.close();
			pstmt.close();
		}
		return dto;
	}

	public UserRegistrationDTO updateTotalCredit(Connection con,
			UserRegistrationDTO dto) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("UPDATE users SET totalCredit = ? WHERE id = ?");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		pstmt.setFloat(1, dto.getTotalCredit());
		pstmt.setString(2, dto.getId());
		pstmt.executeUpdate();
		System.out.println("Excute update:"+pstmt.executeUpdate());
		pstmt.close();
		return dto;
	}

	public void updateTotalCreditById(Connection con, int userId,
			float amount, String txntype) throws SQLException {
		
		StringBuilder query = new StringBuilder();
		PreparedStatement pstmt = null;
		if (txntype.equals("debit")){
			query.append("UPDATE users SET totalCredit = totalCredit - ? WHERE id = ?");
		pstmt = con.prepareStatement(query.toString());
		 
		pstmt.setFloat(1, amount);
		pstmt.setInt(2, userId);
		}else {
			// for credit
				query.append("UPDATE users SET totalCredit = totalCredit + ? WHERE id = ?");
				pstmt = con.prepareStatement(query.toString());
			 
				pstmt.setFloat(1, amount);
				pstmt.setInt(2, userId);
		}
		pstmt.executeUpdate();
		pstmt.close();
	}
}

