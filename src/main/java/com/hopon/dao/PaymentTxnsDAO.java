package com.hopon.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.hopon.dto.HoponAccountDTO;
import com.hopon.dto.PaymentTxnsDTO;
import com.hopon.dto.UserRegistrationDTO;
import com.hopon.utils.ApplicationUtil;
import com.hopon.utils.ConfigurationException;
import com.hopon.utils.QueryExecuter;
import com.hopon.utils.Validator;
import com.mysql.jdbc.Statement;

public class PaymentTxnsDAO {
	public PaymentTxnsDTO add(Connection con, PaymentTxnsDTO dto)
			throws SQLException {
		if (Validator.isEmpty(dto.getPayment_dt())) {
			dto.setPayment_dt(ApplicationUtil.currentTimeStamp());
		}
		if (Validator.isEmpty(dto.getUpdated_dt())) {
			dto.setUpdated_dt(ApplicationUtil.currentTimeStamp());
		}
		StringBuilder query = new StringBuilder();
		query.append("INSERT INTO paymenttxns(payment_txnsid, from_payer, to_payee, seeker_id, tripdetails, payment_dt, notes, updated_dt, updated_by, created_dt, created_by, distance, amount) values(null, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
		PreparedStatement pstmt = con.prepareStatement(query.toString(),
				Statement.RETURN_GENERATED_KEYS);
		pstmt.setInt(1, dto.getFrom_payer());
		pstmt.setInt(2, dto.getTo_payee());
		pstmt.setInt(3, dto.getSeeker_id());
		pstmt.setString(4, dto.getTrip_details());
		pstmt.setString(5, dto.getPayment_dt());
		pstmt.setString(6, dto.getNotes());
		pstmt.setString(7, dto.getUpdated_dt());
		pstmt.setInt(8, dto.getUpdated_by());
		pstmt.setString(9, dto.getCreated_dt());
		pstmt.setInt(10, dto.getCreated_by());
		pstmt.setFloat(11, dto.getDistance());
		pstmt.setFloat(12, dto.getAmount());
		pstmt.executeUpdate();
		ResultSet tableKeys = pstmt.getGeneratedKeys();
		tableKeys.next();
		int autoGeneratedID = tableKeys.getInt(1);
		tableKeys.close();
		pstmt.close();
		dto.setPayment_txnsid(autoGeneratedID);
		return dto;
	}

	public List<PaymentTxnsDTO> fetchAll(Connection con) throws SQLException {
		List<PaymentTxnsDTO> dtos = new ArrayList<PaymentTxnsDTO>();
		StringBuilder query = new StringBuilder();
		query.append("SELECT payment_txnsid, from_payer, to_payee, seeker_id, trip_details, payment_dt, notes, updated_dt, updated_by, created_dt, created_by, distance, amount from paymenttxns WHERE 1");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		while (rs.next()) {
			PaymentTxnsDTO dto = new PaymentTxnsDTO();
			dto.setPayment_txnsid(rs.getInt(1));
			dto.setFrom_payer(rs.getInt(2));
			dto.setTo_payee(rs.getInt(3));
			dto.setSeeker_id(rs.getInt(4));
			dto.setTrip_details(rs.getString(5));
			dto.setPayment_dt(rs.getString(6));
			dto.setNotes(rs.getString(7));
			dto.setUpdated_dt(rs.getString(8));
			dto.setUpdated_by(rs.getInt(9));
			dto.setCreated_dt(rs.getString(10));
			dto.setCreated_by(rs.getInt(11));
			dto.setDistance(rs.getInt(12));
			dto.setAmount(rs.getInt(13));
			dtos.add(dto);
		}
		rs.close();
		pstmt.close();
		return dtos;
	}

	public List<PaymentTxnsDTO> fetchAllByDate(Connection con, Date date)
			throws SQLException {
		List<PaymentTxnsDTO> dtos = new ArrayList<PaymentTxnsDTO>();
		StringBuilder query = new StringBuilder();
		query.append("SELECT payment_txnsid, from_payer, to_payee, seeker_id, tripdetails, payment_dt, notes, updated_dt, updated_by, created_dt, created_by, distance, amount from paymenttxns WHERE DATE(Payment_dt) =  ?");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		pstmt.setString(1, ApplicationUtil.dateFormat1.format(date));
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		while (rs.next()) {
			PaymentTxnsDTO dto = new PaymentTxnsDTO();
			dto.setPayment_txnsid(rs.getInt(1));
			dto.setFrom_payer(rs.getInt(2));
			dto.setTo_payee(rs.getInt(3));
			dto.setSeeker_id(rs.getInt(4));
			dto.setTrip_details(rs.getString(5));
			dto.setPayment_dt(rs.getString(6));
			dto.setNotes(rs.getString(7));
			dto.setUpdated_dt(rs.getString(8));
			dto.setUpdated_by(rs.getInt(9));
			dto.setCreated_dt(rs.getString(10));
			dto.setCreated_by(rs.getInt(11));
			dto.setDistance(rs.getInt(12));
			dto.setAmount(rs.getInt(13));
			dtos.add(dto);
		}
		rs.close();
		pstmt.close();
		return dtos;
	}

	public PaymentTxnsDTO paymentTxnCancel(Connection con, PaymentTxnsDTO dto)
			throws SQLException {
		if (Validator.isEmpty(dto.getUpdated_dt())) {
			dto.setUpdated_dt(ApplicationUtil.currentTimeStamp());
		}
		StringBuilder query = new StringBuilder();
		query.append("UPDATE paymenttxns SET from_payer = ?, To_payee = ?, updated_dt = ?, updated_by = ? WHERE seeker_id = ?");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		pstmt.setInt(1, dto.getFrom_payer());
		pstmt.setInt(2, dto.getTo_payee());
		pstmt.setString(3, dto.getUpdated_dt());
		pstmt.setInt(4, dto.getUpdated_by());
		pstmt.setFloat(5, dto.getSeeker_id());
		pstmt.executeUpdate();
		pstmt.close();
		return dto;
	}

	public void paymentTxnHoponToUser(Connection con,
			HoponAccountDTO hoponAccountDto, UserRegistrationDTO userDto)
			throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("UPDATE hoponaccounts SET Balance = Balance - ?, UpdatedDT = ?, UpdatedBy = ? WHERE idHoponAccounts = ? ");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		pstmt.setFloat(1, hoponAccountDto.getBalance());
		pstmt.setString(2, hoponAccountDto.getUpdateDate());
		pstmt.setInt(3, hoponAccountDto.getUpdatedBy());
		pstmt.setInt(4, hoponAccountDto.getIdHoponAccounts());
		pstmt.executeUpdate();
		pstmt.close();

		query = new StringBuilder();
		query.append("UPDATE users SET totalCredit = totalCredit + ? WHERE id = ?");
		pstmt = con.prepareStatement(query.toString());
		pstmt.setFloat(1, userDto.getTotalCredit());
		pstmt.setString(2, userDto.getId());
		pstmt.executeUpdate();
		pstmt.close();
	}

	public void paymentTxnUserToHopon(Connection con,
			HoponAccountDTO hoponAccountDto, UserRegistrationDTO userDto)
			throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("UPDATE hoponaccounts SET Balance = Balance + ?, UpdatedDT = ?, UpdatedBy = ? WHERE idHoponAccounts = ? ");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		pstmt.setFloat(1, hoponAccountDto.getBalance());
		pstmt.setString(2, hoponAccountDto.getUpdateDate());
		pstmt.setInt(3, hoponAccountDto.getUpdatedBy());
		pstmt.setInt(4, hoponAccountDto.getIdHoponAccounts());
		pstmt.executeUpdate();
		pstmt.close();

		query = new StringBuilder();
		query.append("UPDATE users SET totalCredit = totalCredit - ? WHERE id = ?");
		pstmt = con.prepareStatement(query.toString());
		pstmt.setFloat(1, userDto.getTotalCredit());
		pstmt.setString(2, userDto.getId());
		pstmt.executeUpdate();
		pstmt.close();
	}

	public List<PaymentTxnsDTO> searchCompletedTransaction(Connection con,
			String userId, Date d1, Date d2) throws SQLException {
		List dtos = new ArrayList();
		StringBuilder query = new StringBuilder();
		query.append("SELECT payment_txnsid, from_payer, to_payee, seeker_id, tripdetails, payment_dt, notes, updated_dt, updated_by, created_dt, created_by, distance, amount from paymenttxns WHERE (DATE(payment_dt) BETWEEN ? AND ? ) AND from_payer = ? order by created_dt DESC");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		pstmt.setString(1, ApplicationUtil.dateFormat1.format(d1));
		pstmt.setString(2, ApplicationUtil.dateFormat1.format(d2));
		pstmt.setString(3, userId);
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString(),
				new Object[0]);
		while (rs.next()) {
			System.out.println("Inside the searchcompltion");
			PaymentTxnsDTO dto = new PaymentTxnsDTO();
			dto.setPayment_txnsid(rs.getInt(1));
			dto.setFrom_payer(rs.getInt(2));
			dto.setTo_payee(rs.getInt(3));
			dto.setSeeker_id(rs.getInt(4));
			dto.setTrip_details(rs.getString(5));
			dto.setPayment_dt(rs.getString(6));
			dto.setNotes(rs.getString(7));
			dto.setUpdated_dt(rs.getString(8));
			dto.setUpdated_by(rs.getInt(9));
			dto.setCreated_dt(rs.getString(10));
			dto.setCreated_by(rs.getInt(11));
			dto.setDistance(rs.getInt(12));
			dto.setAmount(rs.getInt(13));
			dtos.add(dto);
		}
		rs.close();
		pstmt.close();
		return dtos;
	}
	public PaymentTxnsDTO fetchTxnAmountByToPayee(Connection con,PaymentTxnsDTO dto, int id) throws ConfigurationException{
		StringBuilder query=new StringBuilder();
		query.append("SELECT sum(amount) FROM hopondb.paymenttxns WHERE to_payee="+id+" AND created_dt BETWEEN DATE_ADD(curdate(), INTERVAL -1 DAY) and curdate()");
		try {
			PreparedStatement psmt=con.prepareStatement(query.toString());
			ResultSet rs = QueryExecuter.getResultSet(psmt, query.toString());
			while(rs.next()){
				dto.setAmount(rs.getFloat(1));
			}
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		
		return dto;
		
	}
	
	public List<PaymentTxnsDTO> fetchTxnAmountByfrompayer(Connection con, int id) throws ConfigurationException{
		StringBuilder query=new StringBuilder();
		List<PaymentTxnsDTO> PaymentTxnsList = new ArrayList<PaymentTxnsDTO>();
		query.append("SELECT sum(pt.amount), pt.to_payee, u.travel FROM hopondb.paymenttxns pt, users u WHERE pt.to_payee = u.id AND pt.from_payer=100 AND pt.created_dt BETWEEN DATE_ADD(curdate(), INTERVAL -1 DAY) and curdate() group by pt.to_payee");
		try {
			PreparedStatement psmt=con.prepareStatement(query.toString());
			ResultSet rs = QueryExecuter.getResultSet(psmt, query.toString());
			while(rs.next()){
				PaymentTxnsDTO dto=new PaymentTxnsDTO();
				dto.setAmount(rs.getFloat(1));
				dto.setTo_payee(rs.getInt(2));
				dto.setTravel(rs.getString(3));
				PaymentTxnsList.add(dto);
			}
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		
		return PaymentTxnsList;
		
	}
}
