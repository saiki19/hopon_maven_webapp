package com.hopon.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.hopon.dto.MessageBoardDTO;
import com.hopon.dto.SmsReplyDTO;
import com.hopon.dto.SmsReplyDTO;
import com.hopon.utils.ApplicationUtil;
import com.hopon.utils.QueryExecuter;

public class MessageBoardDAO {
	public MessageBoardDTO insertMessage(Connection con, MessageBoardDTO dto) throws SQLException {
		List<String> msgStatus = new ArrayList<String>();
		if(dto.getMessageChannel() != null && !dto.getMessageChannel().equals("")) {
			if(dto.getMessageChannel().equalsIgnoreCase("A")) {
				msgStatus.add("E");msgStatus.add("S");msgStatus.add("M");
			} else {
				msgStatus.add(dto.getMessageChannel());
			}
		} else {
			msgStatus.add("M");
		}
		
		for(String statusTemp:msgStatus) {
			StringBuilder query = new StringBuilder();
			query.append("INSERT into messageboard (Submittedby, Message, MessageChannel, MessageStatus, To_Member, CircleId, MessageType, CreatedbyDT, CreatedBy, UpdatedDT, UpdatedBy, Pool_Request_id, emailSubject, ride_id, attachements,guest_id) value (?,?,?,?,?,?,?,'" +ApplicationUtil.currentTimeStamp()+"',?, '" +ApplicationUtil.currentTimeStamp()+"',?,?,?,?,?,?)");
			PreparedStatement pstmt = con.prepareStatement(query.toString(),Statement.RETURN_GENERATED_KEYS);
			pstmt.setInt(1, dto.getSubmittedBy());
			pstmt.setString(2, dto.getMessage());
			//A- all, S-SMS, E-Email, M-message board
			pstmt.setString(3, statusTemp);
			
			//U - unread, R - Read
			//pstmt.setString(4, dto.getMessageStatus());
			//U-unread, R-read, D- Deleted, S-Email Sent
			pstmt.setString(4, "U");
			/*
			 * Either ToMember or CircleId has to be given or one of them can be null. 
			 * If both are given only CircleID will be stored.
			 */
			if(dto.getCircleId() > 0 && dto.getToMember() > 0) {
				pstmt.setInt(5, 0);
				pstmt.setInt(6, dto.getCircleId());	
			} else if(dto.getCircleId() > 0) {
				pstmt.setInt(5, 0);
				pstmt.setInt(6, dto.getCircleId());	
			} else {
				pstmt.setInt(5, dto.getToMember());
				pstmt.setInt(6, 0);	
			}	
			//MessageType indicates the screen from which its called can be values like - C, etc
			// C-cancelled, M-matched, D-done or completed
			pstmt.setString(7, dto.getMessageType());
			pstmt.setInt(8, dto.getCreatedBy());
			pstmt.setInt(9, dto.getUpdatedBy());
			pstmt.setInt(10, dto.getPoolRequestId());
			pstmt.setString(11, dto.getEmailSubject());
			pstmt.setInt(12, dto.getRideId());
			pstmt.setString(13, "");
	  		if(dto.getAttachements() != null && dto.getAttachements().size() > 0) {
	  			pstmt.setString(13, dto.getAttachements().toString());
	  		}

	  		pstmt.setInt(14, dto.getGuest_id());
	  		pstmt.executeUpdate();
	  		ResultSet tableKeys = pstmt.getGeneratedKeys();
	  		tableKeys.next();
	  		int autoGeneratedID = tableKeys.getInt(1);
	  		pstmt.close();
	  		dto.setMessageId(autoGeneratedID);
	  		if(dto.getCircleId() > 0) {
	  			query.append("UPDATE messageboard set messageboard.To_Member = (select circles.CircleOwner_Member_Id_P from circles WHERE circles.Circle_Id = messageboard.CircleId) WHERE messageboard.To_Member = 0");
	  			pstmt = con.prepareStatement(query.toString());
	  			pstmt.executeUpdate();
	  		}
	  		tableKeys.close();
			pstmt.close();
		}
		
		return dto;
	}
	
	public void makeMessageRead(Connection con, List<Integer> messageId) throws SQLException {
		StringBuilder query = new StringBuilder();
		String inClause = "";
		for(int i:messageId) {
			inClause += i + ",";
		}
		inClause += "0";
		
		query.append("UPDATE messageboard set MessageStatus = 'R', UpdatedDT = '" +ApplicationUtil.currentTimeStamp()+"' WHERE MessageChannel IN('E', 'S', 'M') AND MessageId IN(" + inClause + ")");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		pstmt.executeUpdate();
  		pstmt.close();
	}
	public void makePopupMessageRead(Connection con, List<Integer> messageId) throws SQLException {
		StringBuilder query = new StringBuilder();
		String inClause = "";
		for(int i:messageId) {
			inClause += i + ",";
		}
		inClause += "0";
		
		query.append("UPDATE messageboard set MessageStatus = 'R', UpdatedDT = '" +ApplicationUtil.currentTimeStamp()+"' WHERE MessageChannel IN('P') AND MessageId IN(" + inClause + ")");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		pstmt.executeUpdate();
  		pstmt.close();
	}
	public void makeMessaeDelete(Connection con, List<Integer> messageId) throws SQLException {
		StringBuilder query = new StringBuilder();
		String inClause = "";
		for(int i:messageId) {
			inClause += i + ",";
		}
		inClause += "0";
		
		query.append("UPDATE messageboard set MessageStatus = 'D', UpdatedDT = '" +ApplicationUtil.currentTimeStamp()+"' WHERE MessageId IN(" + inClause + ")");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		pstmt.executeUpdate();
  		pstmt.close();
	}
	public List<MessageBoardDTO> fetchUnreadMesage(Connection con) throws SQLException {
		List<MessageBoardDTO> dtos = new ArrayList<MessageBoardDTO>();
		StringBuilder query = new StringBuilder();
		query.append("SELECT MessageId, Submittedby, Message, MessageChannel, MessageStatus, To_Member, CircleId, " +
				"MessageType, CreatedbyDT, CreatedBy, UpdatedDT, UpdatedBy, Pool_Request_id, emailSubject, ride_id, attachements " +
				"from messageboard WHERE MessageStatus = 'U' ORDER BY MessageStatus DESC, CreatedbyDT DESC");
		PreparedStatement pstmt = con.prepareStatement(query.toString());		
		ResultSet rs = pstmt.executeQuery();
		List<Integer> messageId = new ArrayList<Integer>();
		while(rs.next()) {			
			messageId.add(rs.getInt(1));
			MessageBoardDTO messageDto = new MessageBoardDTO();
			messageDto.setMessageId(rs.getInt(1));
			messageDto.setSubmittedBy(rs.getInt(2));
			messageDto.setMessage(rs.getString(3));
			messageDto.setMessageChannel(rs.getString(4));
			messageDto.setMessageStatus(rs.getString(5));
			messageDto.setToMember(rs.getInt(6));
			messageDto.setCircleId(rs.getInt(7));
			messageDto.setMessageType(rs.getString(8));
			messageDto.setCreatedByDt(rs.getString(9));
			messageDto.setCreatedBy(rs.getInt(10));
			messageDto.setUpdatedDt(rs.getString(11));
			messageDto.setUpdatedBy(rs.getInt(12));
			messageDto.setPoolRequestId(rs.getInt(13));
			messageDto.setEmailSubject(rs.getString(14));
			messageDto.setRideId(rs.getInt(15));
			Map<String, String> attachMap = new HashMap<String, String>();
			String[] elements = rs.getString(16).replace("{", "").replace("}", "").split(",");
			for(String s1: elements) {
				String[] keyValue = s1.split("=");
				if(keyValue.length >= 2) attachMap.put(keyValue[0], keyValue[1]);
			}
			 
			messageDto.setAttachements(attachMap);
			dtos.add(messageDto);
		}
		rs.close();
		pstmt.close();
		makeMessageRead(con, messageId);
		return dtos;
	}

	public List<List<MessageBoardDTO>> fetchEmailMesage(Connection con) throws SQLException {
		List<MessageBoardDTO> dtos = new ArrayList<MessageBoardDTO>();
		//This is for the Guest Declarations.
		List<MessageBoardDTO> glist=new ArrayList<MessageBoardDTO>();
		List<Integer> guestId = new ArrayList<Integer>();
		List<Integer> guestlist = new ArrayList<Integer>();
		
		//Return Multiple Values like this
		List<List<MessageBoardDTO>> dtosandGlist=new ArrayList<List<MessageBoardDTO>>(); 
		
		StringBuilder query = new StringBuilder();
		query.append("SELECT MessageId, Submittedby, Message, MessageChannel, MessageStatus, To_Member, CircleId, MessageType, CreatedbyDT, CreatedBy, UpdatedDT, UpdatedBy, Pool_Request_id, emailSubject, ride_id, attachements, guest_id from messageboard WHERE (MessageChannel = 'E' OR MessageChannel = 'A') AND MessageStatus = 'U'");
		PreparedStatement pstmt = con.prepareStatement(query.toString());		
		ResultSet rs = pstmt.executeQuery();
		List<Integer> messageId = new ArrayList<Integer>();
		List<Integer> list = new ArrayList<Integer>();
		while(rs.next()) {
			if(rs.getInt(17)==0){
			if(!list.contains(rs.getInt(6))) {
				list.add(rs.getInt(6));
			}		
			if(!list.contains(rs.getInt(10))) {
				list.add(rs.getInt(10));
			}
			messageId.add(rs.getInt(1));
			MessageBoardDTO messageDto = new MessageBoardDTO();
			messageDto.setMessageId(rs.getInt(1));
			messageDto.setSubmittedBy(rs.getInt(2));
			messageDto.setMessage(rs.getString(3));
			messageDto.setMessageChannel(rs.getString(4));
			messageDto.setMessageStatus(rs.getString(5));
			messageDto.setToMember(rs.getInt(6));
			messageDto.setCircleId(rs.getInt(7));
			messageDto.setMessageType(rs.getString(8));
			messageDto.setCreatedByDt(rs.getString(9));
			messageDto.setCreatedBy(rs.getInt(10));
			messageDto.setUpdatedDt(rs.getString(11));
			messageDto.setUpdatedBy(rs.getInt(12));
			messageDto.setPoolRequestId(rs.getInt(13));
			messageDto.setEmailSubject(rs.getString(14));
			messageDto.setRideId(rs.getInt(15));
			
			Map<String, String> attachMap = new HashMap<String, String>();
			String[] elements = rs.getString(16).replace("{", "").replace("}", "").split(",");
			for(String s1: elements) {
				String[] keyValue = s1.split("=");
				if(keyValue.length >= 2) attachMap.put(keyValue[0], keyValue[1]);
			}
			 
			messageDto.setAttachements(attachMap);
			dtos.add(messageDto);
			dtosandGlist.add(dtos);
		}else{
			if(!guestlist.contains(rs.getInt(17))) {
				guestlist.add(rs.getInt(17));
			}		
			if(!guestlist.contains(rs.getInt(10))) {
				guestlist.add(rs.getInt(10));
			}
			messageId.add(rs.getInt(1));
			MessageBoardDTO messageDto = new MessageBoardDTO();
			messageDto.setMessageId(rs.getInt(1));
			messageDto.setSubmittedBy(rs.getInt(2));
			messageDto.setMessage(rs.getString(3));
			messageDto.setMessageChannel(rs.getString(4));
			messageDto.setMessageStatus(rs.getString(5));
			messageDto.setToMember(rs.getInt(6));
			messageDto.setCircleId(rs.getInt(7));
			messageDto.setMessageType(rs.getString(8));
			messageDto.setCreatedByDt(rs.getString(9));
			messageDto.setCreatedBy(rs.getInt(10));
			messageDto.setUpdatedDt(rs.getString(11));
			messageDto.setUpdatedBy(rs.getInt(12));
			messageDto.setPoolRequestId(rs.getInt(13));
			messageDto.setEmailSubject(rs.getString(14));
			messageDto.setRideId(rs.getInt(15));
			messageDto.setGuest_id(rs.getInt(17));
			
			Map<String, String> attachMap = new HashMap<String, String>();
			String[] elements = rs.getString(16).replace("{", "").replace("}", "").split(",");
			for(String s1: elements) {
				String[] keyValue = s1.split("=");
				if(keyValue.length >= 2) attachMap.put(keyValue[0], keyValue[1]);
			}	 
			messageDto.setAttachements(attachMap);
			glist.add(messageDto);
			dtosandGlist.add(glist);
		}	
	}
		rs.close();
		pstmt.close();
		
		if(list.size() > 0) {
			String inClause = "";
			for (int i : list) {
				inClause += i + ",";
			}
			inClause = inClause.substring(0, inClause.length() - 1);
			query = new StringBuilder("SELECT id, email_id from users WHERE id IN("+inClause+")");
			pstmt = con.prepareStatement(query.toString());
			ResultSet rs2 = QueryExecuter.getResultSet(pstmt, query.toString());			
			while(rs2.next()) {	
				for(MessageBoardDTO dtoTemp:dtos) {
					if(rs2.getInt(1) == dtoTemp.getToMember()) {
						dtoTemp.setToMemberEmail(rs2.getString(2));
					}
					if(rs2.getInt(1) == dtoTemp.getCreatedBy()) {
						dtoTemp.setCreatedByEmail(rs2.getString(2));
					}
				}
			}
			rs2.close();
			pstmt.close();
		}
	
		if(guestlist.size() > 0) {
			String guestinClause = "";
			for (int i : guestlist) {
				guestinClause += i + ",";
			}
			guestinClause = guestinClause.substring(0, guestinClause.length() - 1);
			query = new StringBuilder("SELECT id, email_id from guests WHERE id IN("+guestinClause+")");
			pstmt = con.prepareStatement(query.toString());
			ResultSet guestrs = QueryExecuter.getResultSet(pstmt, query.toString());
						
			while(guestrs.next()) {	
				for(MessageBoardDTO dtoTemp:glist) {
					if(guestrs.getInt(1) == dtoTemp.getGuest_id()) {
						dtoTemp.setToMemberEmail(guestrs.getString(2));
					}
					if(guestrs.getInt(1) == dtoTemp.getCreatedBy()) {
						dtoTemp.setCreatedByEmail(guestrs.getString(2));
					}
				}
			}
			guestrs.close();
			pstmt.close();
	
		}
		makeMessageRead(con, messageId);
		return dtosandGlist;	
	}
	public List<MessageBoardDTO> fetchSmsMesage(Connection con) throws SQLException {
		List<MessageBoardDTO> dtos = new ArrayList<MessageBoardDTO>();
		StringBuilder query = new StringBuilder();
		query.append("SELECT MessageId, Submittedby, Message, MessageChannel, MessageStatus, To_Member, CircleId, MessageType, CreatedbyDT, CreatedBy, UpdatedDT, UpdatedBy, Pool_Request_id, ride_id from messageboard WHERE (MessageChannel = 'S' OR MessageChannel = 'A') AND MessageStatus = 'U'");
		PreparedStatement pstmt = con.prepareStatement(query.toString());		
		ResultSet rs = pstmt.executeQuery();
		List<Integer> messageId = new ArrayList<Integer>();
		while(rs.next()) {			
			messageId.add(rs.getInt(1));
			MessageBoardDTO messageDto = new MessageBoardDTO();
			messageDto.setMessageId(rs.getInt(1));
			messageDto.setSubmittedBy(rs.getInt(2));
			messageDto.setMessage(rs.getString(3));
			messageDto.setMessageChannel(rs.getString(4));
			messageDto.setMessageStatus(rs.getString(5));
			messageDto.setToMember(rs.getInt(6));
			messageDto.setCircleId(rs.getInt(7));
			messageDto.setMessageType(rs.getString(8));
			messageDto.setCreatedByDt(rs.getString(9));
			messageDto.setCreatedBy(rs.getInt(10));
			messageDto.setUpdatedDt(rs.getString(11));
			messageDto.setUpdatedBy(rs.getInt(12));
			messageDto.setPoolRequestId(rs.getInt(13));
			messageDto.setRideId(rs.getInt(14));
			dtos.add(messageDto);
		}
		rs.close();
		pstmt.close();
		makeMessageRead(con, messageId);
		return dtos;
	}
	
	public List<MessageBoardDTO> fetchPopupMesage(Connection con, int userid) throws SQLException {
		List<MessageBoardDTO> dtos = new ArrayList<MessageBoardDTO>();
		StringBuilder query = new StringBuilder();
		query.append("SELECT MessageId, Submittedby, Message, MessageChannel, MessageStatus, To_Member, CircleId, MessageType, CreatedbyDT, CreatedBy, UpdatedDT, UpdatedBy, Pool_Request_id, ride_id from messageboard WHERE MessageChannel = 'P' AND MessageStatus = 'U' AND To_Member = " + userid + " ORDER BY MessageStatus DESC, CreatedbyDT DESC");
		PreparedStatement pstmt = con.prepareStatement(query.toString());		
		ResultSet rs = pstmt.executeQuery();
		List<Integer> messageId = new ArrayList<Integer>();
		while(rs.next()) {
			messageId.add(rs.getInt(1));
			MessageBoardDTO messageDto = new MessageBoardDTO();
			messageDto.setMessageId(rs.getInt(1));
			messageDto.setSubmittedBy(rs.getInt(2));
			messageDto.setMessage(rs.getString(3));
			messageDto.setMessageChannel(rs.getString(4));
			messageDto.setMessageStatus(rs.getString(5));
			messageDto.setToMember(rs.getInt(6));
			messageDto.setCircleId(rs.getInt(7));
			messageDto.setMessageType(rs.getString(8));
			messageDto.setCreatedByDt(rs.getString(9));
			messageDto.setCreatedBy(rs.getInt(10));
			messageDto.setUpdatedDt(rs.getString(11));
			messageDto.setUpdatedBy(rs.getInt(12));
			messageDto.setPoolRequestId(rs.getInt(13));
			messageDto.setRideId(rs.getInt(14));
			dtos.add(messageDto);
		}
		rs.close();
		pstmt.close();
		makeMessageRead(con, messageId);
		return dtos;
	}
	
	public List<MessageBoardDTO> fetchBoardMesage(Connection con, String userid, String status) throws SQLException {
		List<MessageBoardDTO> dtos = new ArrayList<MessageBoardDTO>();
		StringBuilder query = new StringBuilder();
		if(status == null) {
			status = "'U', 'R', 'D'";
		} else {
			status = "'"+status+"'";
		}
		query.append("SELECT MessageId, Submittedby, Message, MessageChannel, MessageStatus, To_Member, CircleId, MessageType, CreatedbyDT, CreatedBy, UpdatedDT, UpdatedBy, Pool_Request_id, ride_id from messageboard WHERE (MessageChannel = 'M' OR MessageChannel = 'A') AND MessageStatus IN("+status+") AND To_Member = " + userid + " ORDER BY MessageStatus DESC, CreatedbyDT DESC");
		PreparedStatement pstmt = con.prepareStatement(query.toString());		
		ResultSet rs = pstmt.executeQuery();
		List<Integer> messageId = new ArrayList<Integer>();
		while(rs.next()) {			
			messageId.add(rs.getInt(1));
			MessageBoardDTO messageDto = new MessageBoardDTO();
			messageDto.setMessageId(rs.getInt(1));
			messageDto.setSubmittedBy(rs.getInt(2));
			messageDto.setMessage(rs.getString(3));
			messageDto.setMessageChannel(rs.getString(4));
			messageDto.setMessageStatus(rs.getString(5));
			messageDto.setToMember(rs.getInt(6));
			messageDto.setCircleId(rs.getInt(7));
			messageDto.setMessageType(rs.getString(8));
			messageDto.setCreatedByDt(rs.getString(9));
			messageDto.setCreatedBy(rs.getInt(10));
			messageDto.setUpdatedDt(rs.getString(11));
			messageDto.setUpdatedBy(rs.getInt(12));
			messageDto.setPoolRequestId(rs.getInt(13));
			messageDto.setRideId(rs.getInt(14));
			dtos.add(messageDto);
		}
		rs.close();
		pstmt.close();
		//makeMessaeRead(con, messageId);
		return dtos;
	}

	public List<MessageBoardDTO> findMessage(Connection con, String userid, String status, int rowNumber, int limit) throws SQLException {
		List<MessageBoardDTO> dtos = new ArrayList<MessageBoardDTO>();
		if(status == null) {
			status = "'U', 'R', 'D'";
		} else {
			status = "'"+status+"'";
		}
		StringBuilder query = new StringBuilder();
		query.append("SELECT MessageId, Submittedby, Message, MessageChannel, MessageStatus, To_Member, CircleId, MessageType, CreatedbyDT, CreatedBy, UpdatedDT, UpdatedBy, Pool_Request_id, ride_id from messageboard WHERE (MessageChannel = 'M' OR MessageChannel = 'A') AND MessageStatus IN("+status+") ORDER BY MessageStatus DESC, CreatedbyDT DESC");
		PreparedStatement pstmt = con.prepareStatement(query.toString());		
		
		ResultSet rs = pstmt.executeQuery();
		List<Integer> messageId = new ArrayList<Integer>();
		while(rs.next()) {			
			messageId.add(rs.getInt(1));
			MessageBoardDTO messageDto = new MessageBoardDTO();
			messageDto.setMessageId(rs.getInt(1));
			messageDto.setSubmittedBy(rs.getInt(2));
			messageDto.setMessage(rs.getString(3));
			messageDto.setMessageChannel(rs.getString(4));
			messageDto.setMessageStatus(rs.getString(5));
			messageDto.setToMember(rs.getInt(6));
			messageDto.setCircleId(rs.getInt(7));
			messageDto.setMessageType(rs.getString(8));
			messageDto.setCreatedByDt(rs.getString(9));
			messageDto.setCreatedBy(rs.getInt(10));
			messageDto.setUpdatedDt(rs.getString(11));
			messageDto.setUpdatedBy(rs.getInt(12));
			messageDto.setPoolRequestId(rs.getInt(13));
			messageDto.setRideId(rs.getInt(14));
			dtos.add(messageDto);
		}
		rs.close();
		pstmt.close();
		makeMessageRead(con, messageId);
		return dtos;
	}

	public void updateMessageSentStatus(Connection con, int[] messageId) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("UPDATE messageboard set MessageStatus = 'S' WHERE MessageId IN (?)");
		String userIdStr = "";
		for(int x:messageId) {
			userIdStr += x + ",";
		}
		userIdStr = userIdStr.substring(0, userIdStr.length() - 1);
		
		PreparedStatement pstmt = con.prepareStatement(query.toString(),Statement.RETURN_GENERATED_KEYS);
		pstmt.setString(1, userIdStr);
		pstmt.executeUpdate();
  		pstmt.getGeneratedKeys();
  		pstmt.close();
		
	}
	 
	public SmsReplyDTO addSms(Connection con, SmsReplyDTO dto) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("insert into smsreply(smsSid, smsreply.fromNumber, toNumber, body, exotelDate, createdDate) value(?, ?, ?, ?, ?, '" +ApplicationUtil.currentTimeStamp()+"');");
		PreparedStatement pstmt = con.prepareStatement(query.toString(),Statement.RETURN_GENERATED_KEYS);
		
		pstmt.setString(1, dto.getSmsSid()); pstmt.setString(2, dto.getFromNumber()); pstmt.setString(3, dto.getToNumber()); pstmt.setString(4, dto.getBody()); pstmt.setString(5, dto.getExotelDate()); 
		pstmt.executeUpdate();
  		ResultSet tableKeys = pstmt.getGeneratedKeys();
  		tableKeys.next();
  		int autoGeneratedID = tableKeys.getInt(1);
  		tableKeys.close();
  		pstmt.close();
  		dto.setId(autoGeneratedID);
  		return dto;
	}
	// Backup for fetchingmessage
	public List<MessageBoardDTO> fetchEmailMesage1(Connection con) throws SQLException {
		List<MessageBoardDTO> dtos = new ArrayList<MessageBoardDTO>();
		StringBuilder query = new StringBuilder();
		query.append("SELECT MessageId, Submittedby, Message, MessageChannel, MessageStatus, To_Member, CircleId, MessageType, CreatedbyDT, CreatedBy, UpdatedDT, UpdatedBy, Pool_Request_id, emailSubject, ride_id, attachements from messageboard WHERE (MessageChannel = 'E' OR MessageChannel = 'A') AND MessageStatus = 'U'");
		PreparedStatement pstmt = con.prepareStatement(query.toString());		
		ResultSet rs = pstmt.executeQuery();
		List<Integer> messageId = new ArrayList<Integer>();
		List<Integer> list = new ArrayList<Integer>();
		while(rs.next()) {			
			if(!list.contains(rs.getInt(6))) {
				list.add(rs.getInt(6));
			}		
			if(!list.contains(rs.getInt(10))) {
				list.add(rs.getInt(10));
			}
			messageId.add(rs.getInt(1));
			MessageBoardDTO messageDto = new MessageBoardDTO();
			messageDto.setMessageId(rs.getInt(1));
			messageDto.setSubmittedBy(rs.getInt(2));
			messageDto.setMessage(rs.getString(3));
			messageDto.setMessageChannel(rs.getString(4));
			messageDto.setMessageStatus(rs.getString(5));
			messageDto.setToMember(rs.getInt(6));
			messageDto.setCircleId(rs.getInt(7));
			messageDto.setMessageType(rs.getString(8));
			messageDto.setCreatedByDt(rs.getString(9));
			messageDto.setCreatedBy(rs.getInt(10));
			messageDto.setUpdatedDt(rs.getString(11));
			messageDto.setUpdatedBy(rs.getInt(12));
			messageDto.setPoolRequestId(rs.getInt(13));
			messageDto.setEmailSubject(rs.getString(14));
			messageDto.setRideId(rs.getInt(15));
			
			Map<String, String> attachMap = new HashMap<String, String>();
			String[] elements = rs.getString(16).replace("{", "").replace("}", "").split(",");
			for(String s1: elements) {
				String[] keyValue = s1.split("=");
				if(keyValue.length >= 2) attachMap.put(keyValue[0], keyValue[1]);
			}
			 
			messageDto.setAttachements(attachMap);
			dtos.add(messageDto);
		}
		rs.close();
		pstmt.close();
		if(list.size() > 0) {
			String inClause = "";
			for (int i : list) {
				inClause += i + ",";
			}
			inClause = inClause.substring(0, inClause.length() - 1);
			query = new StringBuilder("SELECT id, email_id from users WHERE id IN("+inClause+")");
			pstmt = con.prepareStatement(query.toString());
			ResultSet rs2 = QueryExecuter.getResultSet(pstmt, query.toString());
						
			while(rs2.next()) {	
				for(MessageBoardDTO dtoTemp:dtos) {
					if(rs2.getInt(1) == dtoTemp.getToMember()) {
						dtoTemp.setToMemberEmail(rs2.getString(2));
					}
					
					System.out.println("CreatedBy:"+dtoTemp.getCreatedBy()+"setCreatedByEmail:"+dtoTemp.getCreatedByEmail());
					if(rs2.getInt(1) == dtoTemp.getCreatedBy()) {
						dtoTemp.setCreatedByEmail(rs2.getString(2));
					}
				}
			}
			rs2.close();
			pstmt.close();
		}
		makeMessageRead(con, messageId);
		return dtos;
	}
}
