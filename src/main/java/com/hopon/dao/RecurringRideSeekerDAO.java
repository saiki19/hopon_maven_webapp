package com.hopon.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.hopon.dto.RecurringRideSeekerDTO;
import com.hopon.dto.UserRegistrationDTO;
import com.hopon.utils.ApplicationUtil;
import com.hopon.utils.LoggerSingleton;
import com.hopon.utils.QueryExecuter;
import com.hopon.utils.Validator;
import com.mysql.jdbc.Statement;

public class RecurringRideSeekerDAO {

	public RecurringRideSeekerDTO registerRideSeeker(Connection con ,RecurringRideSeekerDTO rideSeekerDTO )throws SQLException{

		StringBuilder query = new StringBuilder();
		query.append("INSERT INTO recurring_ride_seeker_details (seeker_id,user_id, start_point, via_point, destination_point," +
				"ride_cost,start_tw_early,status,FlexiTimeBefore,FlexiTimeAfter,FromCity," +
				"ToCity,FromPin,ToPin,created_by,created_dt, start_time, isSharedTaxi,custom, start_point_lat, " +
				"start_point_long, via_point_lat, via_point_long, end_point_lat, end_point_long, ride_distance, " +
		"start_tw_late, end_tw_early, end_tw_late, is_result, approverID, subSeekerId) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ");

		PreparedStatement pstmt = con.prepareStatement(query.toString() ,Statement.RETURN_GENERATED_KEYS);
		pstmt.setString(1, rideSeekerDTO.getSeekerID());
		pstmt.setString(2, rideSeekerDTO.getUserID());
		pstmt.setString(3, rideSeekerDTO.getFromAddress1());
		if(rideSeekerDTO.getViaPoint()==null || rideSeekerDTO.getViaPoint().equals("")) {
			rideSeekerDTO.setViaPoint(rideSeekerDTO.getFromAddress1());
		}
		pstmt.setString(4, rideSeekerDTO.getViaPoint());
		pstmt.setString(5, rideSeekerDTO.getToAddress1());
		pstmt.setString(6, rideSeekerDTO.getRideCost());
		pstmt.setString(7, rideSeekerDTO.getStartdateValue());
		//pstmt.setString(8, rideSeekerDTO.getEnddateValue());
		if(rideSeekerDTO.getStatus() != null && rideSeekerDTO.getStatus() != "") {
			pstmt.setString(8, rideSeekerDTO.getStatus());
		} else {
			pstmt.setString(8, "A");
		}

		if( rideSeekerDTO.getFlexiTimeBefore()!=null){
			pstmt.setString(9, rideSeekerDTO.getFlexiTimeBefore().toString());
		}
		if( rideSeekerDTO.getFlexiTimeAfter()!=null){
			pstmt.setString(10, rideSeekerDTO.getFlexiTimeAfter().toString());
		}
		pstmt.setString(11, rideSeekerDTO.getFromAddressCity());
		pstmt.setString(12, rideSeekerDTO.getToAddressCity());
		pstmt.setString(13, rideSeekerDTO.getFromAddressPin());
		pstmt.setString(14, rideSeekerDTO.getToAddressPin());
		pstmt.setString(15, rideSeekerDTO.getCreatedBy());
		if(rideSeekerDTO.getCreatedDate()!=null){
			pstmt.setString(16, rideSeekerDTO.getCreatedDate().toString());
		}
		pstmt.setString(17, rideSeekerDTO.getStartdateValue());
		if(rideSeekerDTO.isSharedTaxi()) {
			pstmt.setString(18, "1");
		} else {
			pstmt.setString(18, "0");
		}
		pstmt.setString(19, rideSeekerDTO.getCustom());

		pstmt.setFloat(20, rideSeekerDTO.getStartPointLatitude());
		pstmt.setFloat(21, rideSeekerDTO.getStartPointLongitude());
		if(rideSeekerDTO.getViaPointLatitude() == 0) {
			rideSeekerDTO.setViaPointLatitude(rideSeekerDTO.getStartPointLatitude());
		}
		if(rideSeekerDTO.getViaPointLongitude() == 0) {
			rideSeekerDTO.setViaPointLongitude(rideSeekerDTO.getStartPointLongitude());
		}
		pstmt.setFloat(22, rideSeekerDTO.getViaPointLatitude());
		pstmt.setFloat(23, rideSeekerDTO.getViaPointLongitude());
		pstmt.setFloat(24, rideSeekerDTO.getEndPointLatitude());
		pstmt.setFloat(25, rideSeekerDTO.getEndPointLongitude());

		pstmt.setFloat(26, rideSeekerDTO.getRideDistance());
		pstmt.setString(27, rideSeekerDTO.getStartDateLate());
		pstmt.setString(28, rideSeekerDTO.getEndDateEarly());
		pstmt.setString(29, rideSeekerDTO.getEndDateLate());
		pstmt.setString(30, "N");
		pstmt.setInt(31, rideSeekerDTO.getApproverID());
		pstmt.setString(32, rideSeekerDTO.getSubSeekerId());
		pstmt.executeUpdate();
		//rideManagementDTO.setRideID(pstmt.getGeneratedKeys().getString(1));
		ResultSet tableKeys = pstmt.getGeneratedKeys();
		tableKeys.next();
		int autoGeneratedID = tableKeys.getInt(1);
		tableKeys.close();
		pstmt.close();

		rideSeekerDTO.setSeekerID(String.valueOf(autoGeneratedID));

		//rideManagementDTO.setRideID(pstmt.getGeneratedKeys().getString(1));

		return rideSeekerDTO;
	}
	public List<RecurringRideSeekerDTO> findAllRideSeeker(Connection con , String userID )throws SQLException{

		List<RecurringRideSeekerDTO>  rideSeekerList = new ArrayList<RecurringRideSeekerDTO>();
		StringBuilder query = new StringBuilder();
		query.append(" SELECT  recurring_ride_seeker_details.seeker_id,  recurring_ride_seeker_details.start_point, recurring_ride_seeker_details.via_point,recurring_ride_seeker_details.destination_point,recurring_ride_seeker_details.ride_cost,recurring_ride_seeker_details.start_tw_early,recurring_ride_seeker_details.status, trip_frequency.Trip_Freq_P,trip_frequency.Days, recurring_ride_seeker_details.custom, recurring_ride_seeker_details.ride_match_rideid, recurring_ride_seeker_details.is_result FROM recurring_ride_seeker_details, trip_frequency where recurring_ride_seeker_details.user_id = '"+userID+"' and recurring_ride_seeker_details.seeker_id = trip_frequency.ride_seeker_id and recurring_ride_seeker_details.status IN('A', 'T', 'O') AND TIMESTAMPDIFF(SECOND,recurring_ride_seeker_details.start_tw_early,'" +ApplicationUtil.currentTimeStamp()+"') < 0 ");
		//query.append(" SELECT  recurring_ride_seeker_details.seeker_id,  recurring_ride_seeker_details.start_point, recurring_ride_seeker_details.via_point,recurring_ride_seeker_details.destination_point,recurring_ride_seeker_details.ride_cost,recurring_ride_seeker_details.start_tw_early,recurring_ride_seeker_details.status, trip_frequency.Trip_Freq_P,trip_frequency.Days, recurring_ride_seeker_details.custom, recurring_ride_seeker_details.ride_match_rideid, recurring_ride_seeker_details.is_result FROM recurring_ride_seeker_details, trip_frequency where recurring_ride_seeker_details.user_id = '"+userID+"' and recurring_ride_seeker_details.seeker_id = trip_frequency.ride_seeker_id and recurring_ride_seeker_details.status != '0' AND TIMESTAMPDIFF(SECOND,recurring_ride_seeker_details.start_tw_early,'" +ApplicationUtil.currentTimeStamp+"') < 0 ");
		//query.append(" SELECT  recurring_ride_seeker_details.seeker_id,  recurring_ride_seeker_details.start_point, recurring_ride_seeker_details.via_point,recurring_ride_seeker_details.destination_point,recurring_ride_seeker_details.ride_cost,recurring_ride_seeker_details.start_tw_early,recurring_ride_seeker_details.status, trip_frequency.Trip_Freq_P,trip_frequency.Days, vehicles_master.Avilable FROM recurring_ride_seeker_details,vehicles_master,trip_frequency where recurring_ride_seeker_details.user_id = '"+userID+"' and recurring_ride_seeker_details.vehicleID = vehicles_master.id and recurring_ride_seeker_details.seeker_id = trip_frequency.ride_seeker_id and recurring_ride_seeker_details.status != '0' and vehicles_master.status = 'A' ");

		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		while(rs.next()) {

			RecurringRideSeekerDTO dto = new RecurringRideSeekerDTO();

			dto.setSeekerID(rs.getString(1));
			dto.setFromAddress1(rs.getString(2));
			dto.setToAddress1(rs.getString(4));
			SimpleDateFormat formatter = new SimpleDateFormat(ApplicationUtil.datePattern3);
			SimpleDateFormat formatter1 = new SimpleDateFormat(ApplicationUtil.datePattern9);
			try {
				Date date = formatter.parse(rs.getString(6));
				dto.setStartdateValue(formatter1.format(date));
			} catch (ParseException e) {
				LoggerSingleton.getInstance().error(e.getStackTrace()[0].getClassName()+"->"+e.getStackTrace()[0].getMethodName()+"() : "+e.getStackTrace()[0].getLineNumber()+" :: "+"Date is : "+rs.getString(6)+"."+e.getMessage());
			}
			dto.setStatus(rs.getString(7));
			dto.setFrequencyID(rs.getString(8));
			dto.setFrequencyinweek(rs.getString(9).substring(1, rs.getString(9).length()-1));
			dto.setCustom(rs.getString(10));
			dto.setRideMatchRideId(rs.getString(11));
			dto.setIsResult(rs.getString(12));
			rideSeekerList.add(dto);
		}
		rs.close();
		pstmt.close();
		return rideSeekerList;
	}
	public RecurringRideSeekerDTO cancleRideSeeker(Connection con ,RecurringRideSeekerDTO rideSeekerDTO)throws SQLException {//also use for update

		StringBuilder query = new StringBuilder();
		query.append("UPDATE recurring_ride_seeker_details SET  status = '" + rideSeekerDTO.getStatus() + "', updated_dt = '" +ApplicationUtil.currentTimeStamp()+"' where seeker_id ='" + rideSeekerDTO.getSeekerID() + "'");

		PreparedStatement	pstmt = con.prepareStatement(query.toString());
		pstmt.executeUpdate();
		pstmt.close();

		return rideSeekerDTO;
	}

	public List<RecurringRideSeekerDTO> fetchCompletedRideSeekerList(Connection con) throws SQLException{
		List<RecurringRideSeekerDTO>  rideSeekerList = new ArrayList<RecurringRideSeekerDTO>();
		StringBuilder query = new StringBuilder();
		query.append("SELECT recurring_ride_seeker_details.seeker_id,  recurring_ride_seeker_details.start_point, recurring_ride_seeker_details.via_point, recurring_ride_seeker_details.destination_point,recurring_ride_seeker_details.ride_cost,recurring_ride_seeker_details.start_tw_early, recurring_ride_seeker_details.status, trip_frequency.Trip_Freq_P,trip_frequency.Days, recurring_ride_seeker_details.ride_match_rideid, recurring_ride_seeker_details.custom, recurring_ride_seeker_details.is_result FROM recurring_ride_seeker_details, trip_frequency where recurring_ride_seeker_details.seeker_id = trip_frequency.ride_seeker_id and recurring_ride_seeker_details.status = 'I' and DATEDIFF('" +ApplicationUtil.currentTimeStamp()+"', recurring_ride_seeker_details.start_tw_early) = 1");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		while(rs.next()) {
			RecurringRideSeekerDTO dto = new RecurringRideSeekerDTO();
			dto.setSeekerID(rs.getString(1));
			dto.setFromAddress1(rs.getString(2));
			dto.setToAddress1(rs.getString(4));
			SimpleDateFormat formatter = new SimpleDateFormat(ApplicationUtil.datePattern3);
			SimpleDateFormat formatter1 = new SimpleDateFormat(ApplicationUtil.datePattern9);
			try {
				Date date = formatter.parse(rs.getString(6));
				dto.setStartdateValue(formatter1.format(date));
			} catch (ParseException e) {
				LoggerSingleton.getInstance().error(e.getStackTrace()[0].getClassName()+"->"+e.getStackTrace()[0].getMethodName()+"() : "+e.getStackTrace()[0].getLineNumber()+" :: "+"Date is : "+rs.getString(6)+"."+e.getMessage());
			}
			dto.setStatus(rs.getString(7));
			dto.setFrequencyID(rs.getString(8));
			dto.setFrequencyinweek(rs.getString(9).substring(1, rs.getString(9).length()-1));
			dto.setCustom(rs.getString(10));
			dto.setRideMatchRideId(rs.getString(11));
			dto.setIsResult(rs.getString(12));
			rideSeekerList.add(dto);
		}
		rs.close();
		pstmt.close();
		return rideSeekerList;
	}

	public RecurringRideSeekerDTO getRideSeekerData(Connection con, int seekerId) throws SQLException {
		RecurringRideSeekerDTO dto = new RecurringRideSeekerDTO();
		StringBuilder query = new StringBuilder();
		query.append("SELECT recurring_ride_seeker_details.seeker_id, recurring_ride_seeker_details.user_id, recurring_ride_seeker_details.start_point, " +
				"recurring_ride_seeker_details.destination_point, recurring_ride_seeker_details.start_tw_early, recurring_ride_seeker_details.status, " +
				"users.first_name, recurring_ride_seeker_details.ride_match_rideid, recurring_ride_seeker_details.is_result, " +
				"recurring_ride_seeker_details.isSharedTaxi, recurring_ride_seeker_details.start_point_lat, recurring_ride_seeker_details.start_point_long, " +
				"recurring_ride_seeker_details.end_point_lat, recurring_ride_seeker_details.end_point_long, recurring_ride_seeker_details.via_point_lat, " +
				"recurring_ride_seeker_details.via_point_long, recurring_ride_seeker_details.created_by, recurring_ride_seeker_details.approverID FROM recurring_ride_seeker_details left outer join users on recurring_ride_seeker_details.user_id = users.id where recurring_ride_seeker_details.seeker_id = '"+ seekerId +"'");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		if(rs.next()) {
			dto.setSeekerID(rs.getString(1));
			dto.setUserID(rs.getString(2));
			dto.setFromAddress1(rs.getString(3));
			dto.setToAddress1(rs.getString(4));
			SimpleDateFormat formatter = new SimpleDateFormat(ApplicationUtil.datePattern3);
			SimpleDateFormat formatter1 = new SimpleDateFormat(ApplicationUtil.datePattern9);
			try {
				Date date = formatter.parse(rs.getString(5));
				dto.setStartdateValue(formatter1.format(date));
			} catch(ParseException e) {}
			dto.setStatus(rs.getString(6));
			dto.setUserName(rs.getString(7));
			dto.setRideMatchRideId(rs.getString(8));
			dto.setIsResult(rs.getString(9));
			if(rs.getString(10).equals("1")) {
				dto.setSharedTaxi(true);
			} else {
				dto.setSharedTaxi(false);
			}
			
			dto.setStartPointLatitude(rs.getFloat(11));
			dto.setStartPointLongitude(rs.getFloat(12));
			dto.setEndPointLatitude(rs.getFloat(13));
			dto.setEndPointLongitude(rs.getFloat(14));
			dto.setViaPointLatitude(rs.getFloat(15));
			dto.setViaPointLongitude(rs.getFloat(16));
			dto.setCreatedBy(rs.getString(17));
			dto.setApproverID(rs.getInt(18));
		}
		rs.close();
		pstmt.close();
		return dto;    	   
	}
	public boolean checkRideSeekerDuplicacy(Connection con, RecurringRideSeekerDTO rideSeekerDTO) throws SQLException {
		StringBuilder query = new StringBuilder();

		query.append("SELECT count(*) from recurring_ride_seeker_details WHERE user_id = ? AND start_point = ? AND destination_point = ? AND " +
			" start_time = ? AND FromCity = ? AND ToCity = ? AND FromPin = ? AND ToPin = ?");


		PreparedStatement pstmt = con.prepareStatement(query.toString());
		pstmt.setString(1, rideSeekerDTO.getUserID());
		pstmt.setString(2, rideSeekerDTO.getFromAddress1());
		pstmt.setString(3, rideSeekerDTO.getToAddress1());
		pstmt.setString(4, rideSeekerDTO.getStartdateValue());


		pstmt.setString(5, rideSeekerDTO.getFromAddressCity());
		pstmt.setString(6, rideSeekerDTO.getToAddressCity());
		pstmt.setString(7, rideSeekerDTO.getFromAddressPin());
		pstmt.setString(8, rideSeekerDTO.getToAddressPin());

		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		boolean test = false;
		if(rs.next()) {
			if(rs.getInt(1) > 0) {
				test = true;
			}
		}
		rs.close();
		pstmt.close();
		return test;
	}
	public void makeRideSeekerCancelForUser(Connection con, UserRegistrationDTO userRegistrationDto) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("UPDATE recurring_ride_seeker_details SET status = 'I', updated_dt = '" +ApplicationUtil.currentTimeStamp()+"' WHERE user_id = " + userRegistrationDto.getId());

		PreparedStatement	pstmt = con.prepareStatement(query.toString());
		pstmt.executeUpdate();
		pstmt.close();
	}
	public int calculateSingleRide(Connection con, List<Integer> seekerId) throws SQLException {
		StringBuilder query = new StringBuilder();
		String subQuery = "";
		for(Integer i:seekerId) {
			subQuery += i + ",";
		}
		subQuery = subQuery.substring(0, subQuery.length() - 1);
		query.append("SELECT seeker_id, max(ride_distance) as maxDistance from recurring_ride_seeker_details WHERE seeker_id IN ("+ subQuery +") group by seeker_id order by maxDistance desc LIMIT 1");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		if(rs.next()) {
			return rs.getInt(1);
		}
		rs.close();
		pstmt.close();
		return 0;
	}
	public void changeStatus(Connection con, int seekerId, String status) throws SQLException {
		StringBuilder query = new StringBuilder();
		query.append("UPDATE recurring_ride_seeker_details set status = '"+status+"' where seeker_id = '"+seekerId+"'");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		pstmt.executeUpdate();
		pstmt.close();
	}
	public List<RecurringRideSeekerDTO> findRideSeekerDataByIds(Connection con, List<Integer> seekerIds) throws SQLException {
		List<RecurringRideSeekerDTO> dtos = new ArrayList<RecurringRideSeekerDTO>();
		String subquery = "";
		for(Integer i:seekerIds) { subquery += i+", "; }
		StringBuilder query = new StringBuilder();
		query.append("select seeker_id, status, is_result, start_tw_early, c.fromNight, c.toNight from recurring_ride_seeker_details r LEFT OUTER JOIN approver a ON r.approverID = a.id LEFT OUTER JOIN company c ON c.userID = a.createdBy where r.seeker_id IN ("+ subquery +" 0) ");//FOR UPDATE
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		while(rs.next()) {
			RecurringRideSeekerDTO dto = new RecurringRideSeekerDTO();
			dto.setSeekerID(rs.getString(1));
			dto.setStatus(rs.getString(2));
			dto.setIsResult(rs.getString(3));
			try {
				Date date = ApplicationUtil.dateFormat3.parse(rs.getString(4));
				dto.setStartdateValue(ApplicationUtil.dateFormat9.format(date));
				dto.setStartDate(date);
				dto.setNightRide(false);
				String a = rs.getString(5);
				String b = rs.getString(6);
				String c = ApplicationUtil.dateFormat17.format(date);
				boolean d = ApplicationUtil.compareDates(rs.getString(5), rs.getString(6), ApplicationUtil.dateFormat17.format(date));
				if(rs.getString(5) != null && rs.getString(6) != null && ApplicationUtil.compareDates(rs.getString(5), rs.getString(6), ApplicationUtil.dateFormat17.format(date))) {
					dto.setNightRide(true);
				}
			} catch(ParseException e) {}
			dtos.add(dto);
		}
		rs.close();
		pstmt.close();
		return dtos;
	}
	public RecurringRideSeekerDTO changeField(Connection con, RecurringRideSeekerDTO rideSeekerDTO) throws SQLException {
		StringBuilder query = new StringBuilder();
		String subQuery = "";
		if(!Validator.isEmpty(rideSeekerDTO.getIsResult())) {
			subQuery += " is_result = '"+rideSeekerDTO.getIsResult()+"', ";
		}
		if(!Validator.isEmpty(rideSeekerDTO.getRideMatchRideId())) {
			subQuery += " ride_match_rideid = '"+rideSeekerDTO.getRideMatchRideId()+"', ";
		}
		query.append("UPDATE recurring_ride_seeker_details SET "+subQuery+"  updated_dt = '" +ApplicationUtil.currentTimeStamp()+"' where seeker_id ='" + rideSeekerDTO.getSeekerID() + "'");

		PreparedStatement	pstmt = con.prepareStatement(query.toString());
		pstmt.executeUpdate();
		pstmt.close();

		return rideSeekerDTO;
	}
	public List<RecurringRideSeekerDTO> fetchRideSeekerUnApproved(Connection con) throws SQLException {
		List<RecurringRideSeekerDTO> dtos = new ArrayList<RecurringRideSeekerDTO>();
		StringBuilder query = new StringBuilder();
		query.append("select r.seeker_id, r.user_id, r.start_point, r.destination_point, r.start_tw_early, r.status, u.first_name, r.ride_match_rideid, r.is_result, r.isSharedTaxi, r.start_point_lat, r.start_point_long, r.end_point_lat, r.end_point_long, r.via_point_lat, r.via_point_long, r.created_by, r.approverID from recurring_ride_seeker_details r left outer join users u on r.user_id = u.id where r.status IN ('O', 'T') AND u.status = 'A' AND TIMESTAMPDIFF(HOUR, '" +ApplicationUtil.currentTimeStamp()+"', r.start_tw_early) >= 10");
		PreparedStatement pstmt = con.prepareStatement(query.toString());
		ResultSet rs = QueryExecuter.getResultSet(pstmt, query.toString());
		while(rs.next()) {
			RecurringRideSeekerDTO dto = new RecurringRideSeekerDTO();
			
			dto.setSeekerID(rs.getString(1));
			dto.setUserID(rs.getString(2));
			dto.setFromAddress1(rs.getString(3));
			dto.setToAddress1(rs.getString(4));
			try {
				Date date = ApplicationUtil.dateFormat3.parse(rs.getString(5));
				dto.setStartdateValue(ApplicationUtil.dateFormat9.format(date));
			} catch(ParseException e) {}
			dto.setStatus(rs.getString(6));
			dto.setUserName(rs.getString(7));
			dto.setRideMatchRideId(rs.getString(8));
			dto.setIsResult(rs.getString(9));
			if(rs.getString(10).equals("1")) {
				dto.setSharedTaxi(true);
			} else {
				dto.setSharedTaxi(false);
			}
			
			dto.setStartPointLatitude(rs.getFloat(11));
			dto.setStartPointLongitude(rs.getFloat(12));
			dto.setEndPointLatitude(rs.getFloat(13));
			dto.setEndPointLongitude(rs.getFloat(14));
			dto.setViaPointLatitude(rs.getFloat(15));
			dto.setViaPointLongitude(rs.getFloat(16));
			dto.setCreatedBy(rs.getString(17));
			dto.setApproverID(rs.getInt(18));
			dtos.add(dto);
		}
		rs.close();
		pstmt.close();
		return dtos;
	}
}
